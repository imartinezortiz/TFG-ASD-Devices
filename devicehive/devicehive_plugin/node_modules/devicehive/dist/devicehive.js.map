{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "index-browser.js",
    "node_modules/decode-uri-component/index.js",
    "node_modules/events/events.js",
    "node_modules/isomorphic-fetch/fetch-npm-browserify.js",
    "node_modules/jwt-decode/lib/atob.js",
    "node_modules/jwt-decode/lib/base64_url_decode.js",
    "node_modules/jwt-decode/lib/index.js",
    "node_modules/object-assign/index.js",
    "node_modules/punycode/punycode.js",
    "node_modules/query-string/index.js",
    "node_modules/querystring-es3/decode.js",
    "node_modules/querystring-es3/encode.js",
    "node_modules/querystring-es3/index.js",
    "node_modules/strict-uri-encode/index.js",
    "node_modules/string-template/index.js",
    "node_modules/universal-websocket-client/browser.js",
    "node_modules/url/url.js",
    "node_modules/url/util.js",
    "node_modules/whatwg-fetch/fetch.js",
    "src/ApiStrategy.js",
    "src/DeviceHive.js",
    "src/controllers/API.js",
    "src/controllers/ConfigurationAPI.js",
    "src/controllers/DeviceAPI.js",
    "src/controllers/DeviceCommandAPI.js",
    "src/controllers/DeviceNotificationAPI.js",
    "src/controllers/DeviceTypeAPI.js",
    "src/controllers/NetworkAPI.js",
    "src/controllers/PluginAPI.js",
    "src/controllers/ServerInfoAPI.js",
    "src/controllers/TokenAPI.js",
    "src/controllers/UserAPI.js",
    "src/controllers/transportResolvers/ApiMap.js",
    "src/controllers/transportResolvers/HttpApiResolver.js",
    "src/controllers/transportResolvers/WebSocketApiResolver.js",
    "src/error/InvalidCredentialsError.js",
    "src/error/NoApiError.js",
    "src/error/NoAuthCredentialsError.js",
    "src/error/ReconnectionAttemptFailedError.js",
    "src/error/UnsupportedApiTransportError.js",
    "src/error/UnsupportedTransportError.js",
    "src/error/WebSocketError.js",
    "src/models/BaseModel.js",
    "src/models/Configuration.js",
    "src/models/Device.js",
    "src/models/DeviceCommand.js",
    "src/models/DeviceNotification.js",
    "src/models/DeviceType.js",
    "src/models/Network.js",
    "src/models/Plugin.js",
    "src/models/PluginToken.js",
    "src/models/User.js",
    "src/models/UserToken.js",
    "src/models/query/CommandGetQuery.js",
    "src/models/query/CommandListQuery.js",
    "src/models/query/CommandPollManyQuery.js",
    "src/models/query/CommandPollQuery.js",
    "src/models/query/CommandWaitQuery.js",
    "src/models/query/DeviceCountQuery.js",
    "src/models/query/DeviceListQuery.js",
    "src/models/query/DeviceTypeCountQuery.js",
    "src/models/query/DeviceTypeDeleteQuery.js",
    "src/models/query/DeviceTypeListQuery.js",
    "src/models/query/NetworkCountQuery.js",
    "src/models/query/NetworkDeleteQuery.js",
    "src/models/query/NetworkListQuery.js",
    "src/models/query/NotificationListQuery.js",
    "src/models/query/NotificationPollManyQuery.js",
    "src/models/query/NotificationPollQuery.js",
    "src/models/query/PluginCountQuery.js",
    "src/models/query/PluginListQuery.js",
    "src/models/query/PluginRegisterQuery.js",
    "src/models/query/PluginUpdateQuery.js",
    "src/models/query/UserCountQuery.js",
    "src/models/query/UserListQuery.js",
    "src/transports/HTTP.js",
    "src/transports/WS.js",
    "src/transports/base/Transport.js",
    "src/utils/Utils.js"
  ],
  "names": [],
  "mappings": "AAAA;ACAA,OAAA,UAAA,GAAoB,QAApB,kBAAoB,CAAptCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjrhhOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrFA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACptBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "window.DeviceHive = require('./src/DeviceHive');",
    "'use strict';\nvar token = '%[a-f0-9]{2}';\nvar singleMatcher = new RegExp(token, 'gi');\nvar multiMatcher = new RegExp('(' + token + ')+', 'gi');\n\nfunction decodeComponents(components, split) {\n\ttry {\n\t\t// Try to decode the entire string first\n\t\treturn decodeURIComponent(components.join(''));\n\t} catch (err) {\n\t\t// Do nothing\n\t}\n\n\tif (components.length === 1) {\n\t\treturn components;\n\t}\n\n\tsplit = split || 1;\n\n\t// Split the array in 2 parts\n\tvar left = components.slice(0, split);\n\tvar right = components.slice(split);\n\n\treturn Array.prototype.concat.call([], decodeComponents(left), decodeComponents(right));\n}\n\nfunction decode(input) {\n\ttry {\n\t\treturn decodeURIComponent(input);\n\t} catch (err) {\n\t\tvar tokens = input.match(singleMatcher);\n\n\t\tfor (var i = 1; i < tokens.length; i++) {\n\t\t\tinput = decodeComponents(tokens, i).join('');\n\n\t\t\ttokens = input.match(singleMatcher);\n\t\t}\n\n\t\treturn input;\n\t}\n}\n\nfunction customDecodeURIComponent(input) {\n\t// Keep track of all the replacements and prefill the map with the `BOM`\n\tvar replaceMap = {\n\t\t'%FE%FF': '\\uFFFD\\uFFFD',\n\t\t'%FF%FE': '\\uFFFD\\uFFFD'\n\t};\n\n\tvar match = multiMatcher.exec(input);\n\twhile (match) {\n\t\ttry {\n\t\t\t// Decode as big chunks as possible\n\t\t\treplaceMap[match[0]] = decodeURIComponent(match[0]);\n\t\t} catch (err) {\n\t\t\tvar result = decode(match[0]);\n\n\t\t\tif (result !== match[0]) {\n\t\t\t\treplaceMap[match[0]] = result;\n\t\t\t}\n\t\t}\n\n\t\tmatch = multiMatcher.exec(input);\n\t}\n\n\t// Add `%C2` at the end of the map to make sure it does not replace the combinator before everything else\n\treplaceMap['%C2'] = '\\uFFFD';\n\n\tvar entries = Object.keys(replaceMap);\n\n\tfor (var i = 0; i < entries.length; i++) {\n\t\t// Replace all decoded components\n\t\tvar key = entries[i];\n\t\tinput = input.replace(new RegExp(key, 'g'), replaceMap[key]);\n\t}\n\n\treturn input;\n}\n\nmodule.exports = function (encodedURI) {\n\tif (typeof encodedURI !== 'string') {\n\t\tthrow new TypeError('Expected `encodedURI` to be of type `string`, got `' + typeof encodedURI + '`');\n\t}\n\n\ttry {\n\t\tencodedURI = encodedURI.replace(/\\+/g, ' ');\n\n\t\t// Try the built in decoder first\n\t\treturn decodeURIComponent(encodedURI);\n\t} catch (err) {\n\t\t// Fallback to a more advanced decoder\n\t\treturn customDecodeURIComponent(encodedURI);\n\t}\n};\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n",
    "// the whatwg-fetch polyfill installs the fetch() function\n// on the global object (window or self)\n//\n// Return that as the export for use in Webpack, Browserify etc.\nrequire('whatwg-fetch');\nmodule.exports = self.fetch.bind(self);\n",
    "/**\n * The code was extracted from:\n * https://github.com/davidchambers/Base64.js\n */\n\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=';\n\nfunction InvalidCharacterError(message) {\n  this.message = message;\n}\n\nInvalidCharacterError.prototype = new Error();\nInvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\nfunction polyfill (input) {\n  var str = String(input).replace(/=+$/, '');\n  if (str.length % 4 == 1) {\n    throw new InvalidCharacterError(\"'atob' failed: The string to be decoded is not correctly encoded.\");\n  }\n  for (\n    // initialize result and counters\n    var bc = 0, bs, buffer, idx = 0, output = '';\n    // get next character\n    buffer = str.charAt(idx++);\n    // character found in table? initialize bit storage and add its ascii value;\n    ~buffer && (bs = bc % 4 ? bs * 64 + buffer : buffer,\n      // and if not first of each 4 characters,\n      // convert the first 8 bits to one ascii character\n      bc++ % 4) ? output += String.fromCharCode(255 & bs >> (-2 * bc & 6)) : 0\n  ) {\n    // try to find character in table (0-63, not found => -1)\n    buffer = chars.indexOf(buffer);\n  }\n  return output;\n}\n\n\nmodule.exports = typeof window !== 'undefined' && window.atob && window.atob.bind(window) || polyfill;\n",
    "var atob = require('./atob');\n\nfunction b64DecodeUnicode(str) {\n  return decodeURIComponent(atob(str).replace(/(.)/g, function (m, p) {\n    var code = p.charCodeAt(0).toString(16).toUpperCase();\n    if (code.length < 2) {\n      code = '0' + code;\n    }\n    return '%' + code;\n  }));\n}\n\nmodule.exports = function(str) {\n  var output = str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n  switch (output.length % 4) {\n    case 0:\n      break;\n    case 2:\n      output += \"==\";\n      break;\n    case 3:\n      output += \"=\";\n      break;\n    default:\n      throw \"Illegal base64url string!\";\n  }\n\n  try{\n    return b64DecodeUnicode(output);\n  } catch (err) {\n    return atob(output);\n  }\n};\n",
    "'use strict';\n\nvar base64_url_decode = require('./base64_url_decode');\n\nfunction InvalidTokenError(message) {\n  this.message = message;\n}\n\nInvalidTokenError.prototype = new Error();\nInvalidTokenError.prototype.name = 'InvalidTokenError';\n\nmodule.exports = function (token,options) {\n  if (typeof token !== 'string') {\n    throw new InvalidTokenError('Invalid token specified');\n  }\n\n  options = options || {};\n  var pos = options.header === true ? 0 : 1;\n  try {\n    return JSON.parse(base64_url_decode(token.split('.')[pos]));\n  } catch (e) {\n    throw new InvalidTokenError('Invalid token specified: ' + e.message);\n  }\n};\n\nmodule.exports.InvalidTokenError = InvalidTokenError;\n",
    "/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n'use strict';\n/* eslint-disable no-unused-vars */\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n\tif (val === null || val === undefined) {\n\t\tthrow new TypeError('Object.assign cannot be called with null or undefined');\n\t}\n\n\treturn Object(val);\n}\n\nfunction shouldUseNative() {\n\ttry {\n\t\tif (!Object.assign) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Detect buggy property enumeration order in older V8 versions.\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\t\tvar test1 = new String('abc');  // eslint-disable-line no-new-wrappers\n\t\ttest1[5] = 'de';\n\t\tif (Object.getOwnPropertyNames(test1)[0] === '5') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test2 = {};\n\t\tfor (var i = 0; i < 10; i++) {\n\t\t\ttest2['_' + String.fromCharCode(i)] = i;\n\t\t}\n\t\tvar order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n\t\t\treturn test2[n];\n\t\t});\n\t\tif (order2.join('') !== '0123456789') {\n\t\t\treturn false;\n\t\t}\n\n\t\t// https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\t\tvar test3 = {};\n\t\t'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n\t\t\ttest3[letter] = letter;\n\t\t});\n\t\tif (Object.keys(Object.assign({}, test3)).join('') !==\n\t\t\t\t'abcdefghijklmnopqrst') {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn true;\n\t} catch (err) {\n\t\t// We don't expect any of the above to throw, but better to be safe.\n\t\treturn false;\n\t}\n}\n\nmodule.exports = shouldUseNative() ? Object.assign : function (target, source) {\n\tvar from;\n\tvar to = toObject(target);\n\tvar symbols;\n\n\tfor (var s = 1; s < arguments.length; s++) {\n\t\tfrom = Object(arguments[s]);\n\n\t\tfor (var key in from) {\n\t\t\tif (hasOwnProperty.call(from, key)) {\n\t\t\t\tto[key] = from[key];\n\t\t\t}\n\t\t}\n\n\t\tif (getOwnPropertySymbols) {\n\t\t\tsymbols = getOwnPropertySymbols(from);\n\t\t\tfor (var i = 0; i < symbols.length; i++) {\n\t\t\t\tif (propIsEnumerable.call(from, symbols[i])) {\n\t\t\t\t\tto[symbols[i]] = from[symbols[i]];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn to;\n};\n",
    "/*! https://mths.be/punycode v1.4.1 by @mathias */\n;(function(root) {\n\n\t/** Detect free variables */\n\tvar freeExports = typeof exports == 'object' && exports &&\n\t\t!exports.nodeType && exports;\n\tvar freeModule = typeof module == 'object' && module &&\n\t\t!module.nodeType && module;\n\tvar freeGlobal = typeof global == 'object' && global;\n\tif (\n\t\tfreeGlobal.global === freeGlobal ||\n\t\tfreeGlobal.window === freeGlobal ||\n\t\tfreeGlobal.self === freeGlobal\n\t) {\n\t\troot = freeGlobal;\n\t}\n\n\t/**\n\t * The `punycode` object.\n\t * @name punycode\n\t * @type Object\n\t */\n\tvar punycode,\n\n\t/** Highest positive signed 32-bit float value */\n\tmaxInt = 2147483647, // aka. 0x7FFFFFFF or 2^31-1\n\n\t/** Bootstring parameters */\n\tbase = 36,\n\ttMin = 1,\n\ttMax = 26,\n\tskew = 38,\n\tdamp = 700,\n\tinitialBias = 72,\n\tinitialN = 128, // 0x80\n\tdelimiter = '-', // '\\x2D'\n\n\t/** Regular expressions */\n\tregexPunycode = /^xn--/,\n\tregexNonASCII = /[^\\x20-\\x7E]/, // unprintable ASCII chars + non-ASCII chars\n\tregexSeparators = /[\\x2E\\u3002\\uFF0E\\uFF61]/g, // RFC 3490 separators\n\n\t/** Error messages */\n\terrors = {\n\t\t'overflow': 'Overflow: input needs wider integers to process',\n\t\t'not-basic': 'Illegal input >= 0x80 (not a basic code point)',\n\t\t'invalid-input': 'Invalid input'\n\t},\n\n\t/** Convenience shortcuts */\n\tbaseMinusTMin = base - tMin,\n\tfloor = Math.floor,\n\tstringFromCharCode = String.fromCharCode,\n\n\t/** Temporary variable */\n\tkey;\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/**\n\t * A generic error utility function.\n\t * @private\n\t * @param {String} type The error type.\n\t * @returns {Error} Throws a `RangeError` with the applicable error message.\n\t */\n\tfunction error(type) {\n\t\tthrow new RangeError(errors[type]);\n\t}\n\n\t/**\n\t * A generic `Array#map` utility function.\n\t * @private\n\t * @param {Array} array The array to iterate over.\n\t * @param {Function} callback The function that gets called for every array\n\t * item.\n\t * @returns {Array} A new array of values returned by the callback function.\n\t */\n\tfunction map(array, fn) {\n\t\tvar length = array.length;\n\t\tvar result = [];\n\t\twhile (length--) {\n\t\t\tresult[length] = fn(array[length]);\n\t\t}\n\t\treturn result;\n\t}\n\n\t/**\n\t * A simple `Array#map`-like wrapper to work with domain name strings or email\n\t * addresses.\n\t * @private\n\t * @param {String} domain The domain name or email address.\n\t * @param {Function} callback The function that gets called for every\n\t * character.\n\t * @returns {Array} A new string of characters returned by the callback\n\t * function.\n\t */\n\tfunction mapDomain(string, fn) {\n\t\tvar parts = string.split('@');\n\t\tvar result = '';\n\t\tif (parts.length > 1) {\n\t\t\t// In email addresses, only the domain name should be punycoded. Leave\n\t\t\t// the local part (i.e. everything up to `@`) intact.\n\t\t\tresult = parts[0] + '@';\n\t\t\tstring = parts[1];\n\t\t}\n\t\t// Avoid `split(regex)` for IE8 compatibility. See #17.\n\t\tstring = string.replace(regexSeparators, '\\x2E');\n\t\tvar labels = string.split('.');\n\t\tvar encoded = map(labels, fn).join('.');\n\t\treturn result + encoded;\n\t}\n\n\t/**\n\t * Creates an array containing the numeric code points of each Unicode\n\t * character in the string. While JavaScript uses UCS-2 internally,\n\t * this function will convert a pair of surrogate halves (each of which\n\t * UCS-2 exposes as separate characters) into a single code point,\n\t * matching UTF-16.\n\t * @see `punycode.ucs2.encode`\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode.ucs2\n\t * @name decode\n\t * @param {String} string The Unicode input string (UCS-2).\n\t * @returns {Array} The new array of code points.\n\t */\n\tfunction ucs2decode(string) {\n\t\tvar output = [],\n\t\t    counter = 0,\n\t\t    length = string.length,\n\t\t    value,\n\t\t    extra;\n\t\twhile (counter < length) {\n\t\t\tvalue = string.charCodeAt(counter++);\n\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {\n\t\t\t\t// high surrogate, and there is a next character\n\t\t\t\textra = string.charCodeAt(counter++);\n\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate\n\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);\n\t\t\t\t} else {\n\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next\n\t\t\t\t\t// code unit is the high surrogate of a surrogate pair\n\t\t\t\t\toutput.push(value);\n\t\t\t\t\tcounter--;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\toutput.push(value);\n\t\t\t}\n\t\t}\n\t\treturn output;\n\t}\n\n\t/**\n\t * Creates a string based on an array of numeric code points.\n\t * @see `punycode.ucs2.decode`\n\t * @memberOf punycode.ucs2\n\t * @name encode\n\t * @param {Array} codePoints The array of numeric code points.\n\t * @returns {String} The new Unicode string (UCS-2).\n\t */\n\tfunction ucs2encode(array) {\n\t\treturn map(array, function(value) {\n\t\t\tvar output = '';\n\t\t\tif (value > 0xFFFF) {\n\t\t\t\tvalue -= 0x10000;\n\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);\n\t\t\t\tvalue = 0xDC00 | value & 0x3FF;\n\t\t\t}\n\t\t\toutput += stringFromCharCode(value);\n\t\t\treturn output;\n\t\t}).join('');\n\t}\n\n\t/**\n\t * Converts a basic code point into a digit/integer.\n\t * @see `digitToBasic()`\n\t * @private\n\t * @param {Number} codePoint The basic numeric code point value.\n\t * @returns {Number} The numeric value of a basic code point (for use in\n\t * representing integers) in the range `0` to `base - 1`, or `base` if\n\t * the code point does not represent a value.\n\t */\n\tfunction basicToDigit(codePoint) {\n\t\tif (codePoint - 48 < 10) {\n\t\t\treturn codePoint - 22;\n\t\t}\n\t\tif (codePoint - 65 < 26) {\n\t\t\treturn codePoint - 65;\n\t\t}\n\t\tif (codePoint - 97 < 26) {\n\t\t\treturn codePoint - 97;\n\t\t}\n\t\treturn base;\n\t}\n\n\t/**\n\t * Converts a digit/integer into a basic code point.\n\t * @see `basicToDigit()`\n\t * @private\n\t * @param {Number} digit The numeric value of a basic code point.\n\t * @returns {Number} The basic code point whose value (when used for\n\t * representing integers) is `digit`, which needs to be in the range\n\t * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n\t * used; else, the lowercase form is used. The behavior is undefined\n\t * if `flag` is non-zero and `digit` has no uppercase form.\n\t */\n\tfunction digitToBasic(digit, flag) {\n\t\t//  0..25 map to ASCII a..z or A..Z\n\t\t// 26..35 map to ASCII 0..9\n\t\treturn digit + 22 + 75 * (digit < 26) - ((flag != 0) << 5);\n\t}\n\n\t/**\n\t * Bias adaptation function as per section 3.4 of RFC 3492.\n\t * https://tools.ietf.org/html/rfc3492#section-3.4\n\t * @private\n\t */\n\tfunction adapt(delta, numPoints, firstTime) {\n\t\tvar k = 0;\n\t\tdelta = firstTime ? floor(delta / damp) : delta >> 1;\n\t\tdelta += floor(delta / numPoints);\n\t\tfor (/* no initialization */; delta > baseMinusTMin * tMax >> 1; k += base) {\n\t\t\tdelta = floor(delta / baseMinusTMin);\n\t\t}\n\t\treturn floor(k + (baseMinusTMin + 1) * delta / (delta + skew));\n\t}\n\n\t/**\n\t * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n\t * symbols.\n\t * @memberOf punycode\n\t * @param {String} input The Punycode string of ASCII-only symbols.\n\t * @returns {String} The resulting string of Unicode symbols.\n\t */\n\tfunction decode(input) {\n\t\t// Don't use UCS-2\n\t\tvar output = [],\n\t\t    inputLength = input.length,\n\t\t    out,\n\t\t    i = 0,\n\t\t    n = initialN,\n\t\t    bias = initialBias,\n\t\t    basic,\n\t\t    j,\n\t\t    index,\n\t\t    oldi,\n\t\t    w,\n\t\t    k,\n\t\t    digit,\n\t\t    t,\n\t\t    /** Cached calculation results */\n\t\t    baseMinusT;\n\n\t\t// Handle the basic code points: let `basic` be the number of input code\n\t\t// points before the last delimiter, or `0` if there is none, then copy\n\t\t// the first basic code points to the output.\n\n\t\tbasic = input.lastIndexOf(delimiter);\n\t\tif (basic < 0) {\n\t\t\tbasic = 0;\n\t\t}\n\n\t\tfor (j = 0; j < basic; ++j) {\n\t\t\t// if it's not a basic code point\n\t\t\tif (input.charCodeAt(j) >= 0x80) {\n\t\t\t\terror('not-basic');\n\t\t\t}\n\t\t\toutput.push(input.charCodeAt(j));\n\t\t}\n\n\t\t// Main decoding loop: start just after the last delimiter if any basic code\n\t\t// points were copied; start at the beginning otherwise.\n\n\t\tfor (index = basic > 0 ? basic + 1 : 0; index < inputLength; /* no final expression */) {\n\n\t\t\t// `index` is the index of the next character to be consumed.\n\t\t\t// Decode a generalized variable-length integer into `delta`,\n\t\t\t// which gets added to `i`. The overflow checking is easier\n\t\t\t// if we increase `i` as we go, then subtract off its starting\n\t\t\t// value at the end to obtain `delta`.\n\t\t\tfor (oldi = i, w = 1, k = base; /* no condition */; k += base) {\n\n\t\t\t\tif (index >= inputLength) {\n\t\t\t\t\terror('invalid-input');\n\t\t\t\t}\n\n\t\t\t\tdigit = basicToDigit(input.charCodeAt(index++));\n\n\t\t\t\tif (digit >= base || digit > floor((maxInt - i) / w)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\ti += digit * w;\n\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\n\t\t\t\tif (digit < t) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tbaseMinusT = base - t;\n\t\t\t\tif (w > floor(maxInt / baseMinusT)) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tw *= baseMinusT;\n\n\t\t\t}\n\n\t\t\tout = output.length + 1;\n\t\t\tbias = adapt(i - oldi, out, oldi == 0);\n\n\t\t\t// `i` was supposed to wrap around from `out` to `0`,\n\t\t\t// incrementing `n` each time, so we'll fix that now:\n\t\t\tif (floor(i / out) > maxInt - n) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tn += floor(i / out);\n\t\t\ti %= out;\n\n\t\t\t// Insert `n` at position `i` of the output\n\t\t\toutput.splice(i++, 0, n);\n\n\t\t}\n\n\t\treturn ucs2encode(output);\n\t}\n\n\t/**\n\t * Converts a string of Unicode symbols (e.g. a domain name label) to a\n\t * Punycode string of ASCII-only symbols.\n\t * @memberOf punycode\n\t * @param {String} input The string of Unicode symbols.\n\t * @returns {String} The resulting Punycode string of ASCII-only symbols.\n\t */\n\tfunction encode(input) {\n\t\tvar n,\n\t\t    delta,\n\t\t    handledCPCount,\n\t\t    basicLength,\n\t\t    bias,\n\t\t    j,\n\t\t    m,\n\t\t    q,\n\t\t    k,\n\t\t    t,\n\t\t    currentValue,\n\t\t    output = [],\n\t\t    /** `inputLength` will hold the number of code points in `input`. */\n\t\t    inputLength,\n\t\t    /** Cached calculation results */\n\t\t    handledCPCountPlusOne,\n\t\t    baseMinusT,\n\t\t    qMinusT;\n\n\t\t// Convert the input in UCS-2 to Unicode\n\t\tinput = ucs2decode(input);\n\n\t\t// Cache the length\n\t\tinputLength = input.length;\n\n\t\t// Initialize the state\n\t\tn = initialN;\n\t\tdelta = 0;\n\t\tbias = initialBias;\n\n\t\t// Handle the basic code points\n\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\tcurrentValue = input[j];\n\t\t\tif (currentValue < 0x80) {\n\t\t\t\toutput.push(stringFromCharCode(currentValue));\n\t\t\t}\n\t\t}\n\n\t\thandledCPCount = basicLength = output.length;\n\n\t\t// `handledCPCount` is the number of code points that have been handled;\n\t\t// `basicLength` is the number of basic code points.\n\n\t\t// Finish the basic string - if it is not empty - with a delimiter\n\t\tif (basicLength) {\n\t\t\toutput.push(delimiter);\n\t\t}\n\n\t\t// Main encoding loop:\n\t\twhile (handledCPCount < inputLength) {\n\n\t\t\t// All non-basic code points < n have been handled already. Find the next\n\t\t\t// larger one:\n\t\t\tfor (m = maxInt, j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\t\t\t\tif (currentValue >= n && currentValue < m) {\n\t\t\t\t\tm = currentValue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,\n\t\t\t// but guard against overflow\n\t\t\thandledCPCountPlusOne = handledCPCount + 1;\n\t\t\tif (m - n > floor((maxInt - delta) / handledCPCountPlusOne)) {\n\t\t\t\terror('overflow');\n\t\t\t}\n\n\t\t\tdelta += (m - n) * handledCPCountPlusOne;\n\t\t\tn = m;\n\n\t\t\tfor (j = 0; j < inputLength; ++j) {\n\t\t\t\tcurrentValue = input[j];\n\n\t\t\t\tif (currentValue < n && ++delta > maxInt) {\n\t\t\t\t\terror('overflow');\n\t\t\t\t}\n\n\t\t\t\tif (currentValue == n) {\n\t\t\t\t\t// Represent delta as a generalized variable-length integer\n\t\t\t\t\tfor (q = delta, k = base; /* no condition */; k += base) {\n\t\t\t\t\t\tt = k <= bias ? tMin : (k >= bias + tMax ? tMax : k - bias);\n\t\t\t\t\t\tif (q < t) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tqMinusT = q - t;\n\t\t\t\t\t\tbaseMinusT = base - t;\n\t\t\t\t\t\toutput.push(\n\t\t\t\t\t\t\tstringFromCharCode(digitToBasic(t + qMinusT % baseMinusT, 0))\n\t\t\t\t\t\t);\n\t\t\t\t\t\tq = floor(qMinusT / baseMinusT);\n\t\t\t\t\t}\n\n\t\t\t\t\toutput.push(stringFromCharCode(digitToBasic(q, 0)));\n\t\t\t\t\tbias = adapt(delta, handledCPCountPlusOne, handledCPCount == basicLength);\n\t\t\t\t\tdelta = 0;\n\t\t\t\t\t++handledCPCount;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t++delta;\n\t\t\t++n;\n\n\t\t}\n\t\treturn output.join('');\n\t}\n\n\t/**\n\t * Converts a Punycode string representing a domain name or an email address\n\t * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n\t * it doesn't matter if you call it on a string that has already been\n\t * converted to Unicode.\n\t * @memberOf punycode\n\t * @param {String} input The Punycoded domain name or email address to\n\t * convert to Unicode.\n\t * @returns {String} The Unicode representation of the given Punycode\n\t * string.\n\t */\n\tfunction toUnicode(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexPunycode.test(string)\n\t\t\t\t? decode(string.slice(4).toLowerCase())\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/**\n\t * Converts a Unicode string representing a domain name or an email address to\n\t * Punycode. Only the non-ASCII parts of the domain name will be converted,\n\t * i.e. it doesn't matter if you call it with a domain that's already in\n\t * ASCII.\n\t * @memberOf punycode\n\t * @param {String} input The domain name or email address to convert, as a\n\t * Unicode string.\n\t * @returns {String} The Punycode representation of the given domain name or\n\t * email address.\n\t */\n\tfunction toASCII(input) {\n\t\treturn mapDomain(input, function(string) {\n\t\t\treturn regexNonASCII.test(string)\n\t\t\t\t? 'xn--' + encode(string)\n\t\t\t\t: string;\n\t\t});\n\t}\n\n\t/*--------------------------------------------------------------------------*/\n\n\t/** Define the public API */\n\tpunycode = {\n\t\t/**\n\t\t * A string representing the current Punycode.js version number.\n\t\t * @memberOf punycode\n\t\t * @type String\n\t\t */\n\t\t'version': '1.4.1',\n\t\t/**\n\t\t * An object of methods to convert from JavaScript's internal character\n\t\t * representation (UCS-2) to Unicode code points, and back.\n\t\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t\t * @memberOf punycode\n\t\t * @type Object\n\t\t */\n\t\t'ucs2': {\n\t\t\t'decode': ucs2decode,\n\t\t\t'encode': ucs2encode\n\t\t},\n\t\t'decode': decode,\n\t\t'encode': encode,\n\t\t'toASCII': toASCII,\n\t\t'toUnicode': toUnicode\n\t};\n\n\t/** Expose `punycode` */\n\t// Some AMD build optimizers, like r.js, check for specific condition patterns\n\t// like the following:\n\tif (\n\t\ttypeof define == 'function' &&\n\t\ttypeof define.amd == 'object' &&\n\t\tdefine.amd\n\t) {\n\t\tdefine('punycode', function() {\n\t\t\treturn punycode;\n\t\t});\n\t} else if (freeExports && freeModule) {\n\t\tif (module.exports == freeExports) {\n\t\t\t// in Node.js, io.js, or RingoJS v0.8.0+\n\t\t\tfreeModule.exports = punycode;\n\t\t} else {\n\t\t\t// in Narwhal or RingoJS v0.7.0-\n\t\t\tfor (key in punycode) {\n\t\t\t\tpunycode.hasOwnProperty(key) && (freeExports[key] = punycode[key]);\n\t\t\t}\n\t\t}\n\t} else {\n\t\t// in Rhino or a web browser\n\t\troot.punycode = punycode;\n\t}\n\n}(this));\n",
    "'use strict';\nvar strictUriEncode = require('strict-uri-encode');\nvar objectAssign = require('object-assign');\nvar decodeComponent = require('decode-uri-component');\n\nfunction encoderForArrayFormat(opts) {\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, index) {\n\t\t\t\treturn value === null ? [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tindex,\n\t\t\t\t\t']'\n\t\t\t\t].join('') : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[',\n\t\t\t\t\tencode(index, opts),\n\t\t\t\t\t']=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'[]=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value) {\n\t\t\t\treturn value === null ? encode(key, opts) : [\n\t\t\t\t\tencode(key, opts),\n\t\t\t\t\t'=',\n\t\t\t\t\tencode(value, opts)\n\t\t\t\t].join('');\n\t\t\t};\n\t}\n}\n\nfunction parserForArrayFormat(opts) {\n\tvar result;\n\n\tswitch (opts.arrayFormat) {\n\t\tcase 'index':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /\\[(\\d*)\\]$/.exec(key);\n\n\t\t\t\tkey = key.replace(/\\[\\d*\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = {};\n\t\t\t\t}\n\n\t\t\t\taccumulator[key][result[1]] = value;\n\t\t\t};\n\n\t\tcase 'bracket':\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tresult = /(\\[\\])$/.exec(key);\n\t\t\t\tkey = key.replace(/\\[\\]$/, '');\n\n\t\t\t\tif (!result) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t} else if (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = [value];\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn function (key, value, accumulator) {\n\t\t\t\tif (accumulator[key] === undefined) {\n\t\t\t\t\taccumulator[key] = value;\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\taccumulator[key] = [].concat(accumulator[key], value);\n\t\t\t};\n\t}\n}\n\nfunction encode(value, opts) {\n\tif (opts.encode) {\n\t\treturn opts.strict ? strictUriEncode(value) : encodeURIComponent(value);\n\t}\n\n\treturn value;\n}\n\nfunction keysSorter(input) {\n\tif (Array.isArray(input)) {\n\t\treturn input.sort();\n\t} else if (typeof input === 'object') {\n\t\treturn keysSorter(Object.keys(input)).sort(function (a, b) {\n\t\t\treturn Number(a) - Number(b);\n\t\t}).map(function (key) {\n\t\t\treturn input[key];\n\t\t});\n\t}\n\n\treturn input;\n}\n\nfunction extract(str) {\n\tvar queryStart = str.indexOf('?');\n\tif (queryStart === -1) {\n\t\treturn '';\n\t}\n\treturn str.slice(queryStart + 1);\n}\n\nfunction parse(str, opts) {\n\topts = objectAssign({arrayFormat: 'none'}, opts);\n\n\tvar formatter = parserForArrayFormat(opts);\n\n\t// Create an object with no prototype\n\t// https://github.com/sindresorhus/query-string/issues/47\n\tvar ret = Object.create(null);\n\n\tif (typeof str !== 'string') {\n\t\treturn ret;\n\t}\n\n\tstr = str.trim().replace(/^[?#&]/, '');\n\n\tif (!str) {\n\t\treturn ret;\n\t}\n\n\tstr.split('&').forEach(function (param) {\n\t\tvar parts = param.replace(/\\+/g, ' ').split('=');\n\t\t// Firefox (pre 40) decodes `%3D` to `=`\n\t\t// https://github.com/sindresorhus/query-string/pull/37\n\t\tvar key = parts.shift();\n\t\tvar val = parts.length > 0 ? parts.join('=') : undefined;\n\n\t\t// missing `=` should be `null`:\n\t\t// http://w3.org/TR/2012/WD-url-20120524/#collect-url-parameters\n\t\tval = val === undefined ? null : decodeComponent(val);\n\n\t\tformatter(decodeComponent(key), val, ret);\n\t});\n\n\treturn Object.keys(ret).sort().reduce(function (result, key) {\n\t\tvar val = ret[key];\n\t\tif (Boolean(val) && typeof val === 'object' && !Array.isArray(val)) {\n\t\t\t// Sort object keys, not values\n\t\t\tresult[key] = keysSorter(val);\n\t\t} else {\n\t\t\tresult[key] = val;\n\t\t}\n\n\t\treturn result;\n\t}, Object.create(null));\n}\n\nexports.extract = extract;\nexports.parse = parse;\n\nexports.stringify = function (obj, opts) {\n\tvar defaults = {\n\t\tencode: true,\n\t\tstrict: true,\n\t\tarrayFormat: 'none'\n\t};\n\n\topts = objectAssign(defaults, opts);\n\n\tif (opts.sort === false) {\n\t\topts.sort = function () {};\n\t}\n\n\tvar formatter = encoderForArrayFormat(opts);\n\n\treturn obj ? Object.keys(obj).sort(opts.sort).map(function (key) {\n\t\tvar val = obj[key];\n\n\t\tif (val === undefined) {\n\t\t\treturn '';\n\t\t}\n\n\t\tif (val === null) {\n\t\t\treturn encode(key, opts);\n\t\t}\n\n\t\tif (Array.isArray(val)) {\n\t\t\tvar result = [];\n\n\t\t\tval.slice().forEach(function (val2) {\n\t\t\t\tif (val2 === undefined) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresult.push(formatter(key, val2, result.length));\n\t\t\t});\n\n\t\t\treturn result.join('&');\n\t\t}\n\n\t\treturn encode(key, opts) + '=' + encode(val, opts);\n\t}).filter(function (x) {\n\t\treturn x.length > 0;\n\t}).join('&') : '';\n};\n\nexports.parseUrl = function (str, opts) {\n\treturn {\n\t\turl: str.split('?')[0] || '',\n\t\tquery: parse(extract(str), opts)\n\t};\n};\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\n// If obj.hasOwnProperty has been overridden, then calling\n// obj.hasOwnProperty(prop) will break.\n// See: https://github.com/joyent/node/issues/1707\nfunction hasOwnProperty(obj, prop) {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n}\n\nmodule.exports = function(qs, sep, eq, options) {\n  sep = sep || '&';\n  eq = eq || '=';\n  var obj = {};\n\n  if (typeof qs !== 'string' || qs.length === 0) {\n    return obj;\n  }\n\n  var regexp = /\\+/g;\n  qs = qs.split(sep);\n\n  var maxKeys = 1000;\n  if (options && typeof options.maxKeys === 'number') {\n    maxKeys = options.maxKeys;\n  }\n\n  var len = qs.length;\n  // maxKeys <= 0 means that we should not limit keys count\n  if (maxKeys > 0 && len > maxKeys) {\n    len = maxKeys;\n  }\n\n  for (var i = 0; i < len; ++i) {\n    var x = qs[i].replace(regexp, '%20'),\n        idx = x.indexOf(eq),\n        kstr, vstr, k, v;\n\n    if (idx >= 0) {\n      kstr = x.substr(0, idx);\n      vstr = x.substr(idx + 1);\n    } else {\n      kstr = x;\n      vstr = '';\n    }\n\n    k = decodeURIComponent(kstr);\n    v = decodeURIComponent(vstr);\n\n    if (!hasOwnProperty(obj, k)) {\n      obj[k] = v;\n    } else if (isArray(obj[k])) {\n      obj[k].push(v);\n    } else {\n      obj[k] = [obj[k], v];\n    }\n  }\n\n  return obj;\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar stringifyPrimitive = function(v) {\n  switch (typeof v) {\n    case 'string':\n      return v;\n\n    case 'boolean':\n      return v ? 'true' : 'false';\n\n    case 'number':\n      return isFinite(v) ? v : '';\n\n    default:\n      return '';\n  }\n};\n\nmodule.exports = function(obj, sep, eq, name) {\n  sep = sep || '&';\n  eq = eq || '=';\n  if (obj === null) {\n    obj = undefined;\n  }\n\n  if (typeof obj === 'object') {\n    return map(objectKeys(obj), function(k) {\n      var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;\n      if (isArray(obj[k])) {\n        return map(obj[k], function(v) {\n          return ks + encodeURIComponent(stringifyPrimitive(v));\n        }).join(sep);\n      } else {\n        return ks + encodeURIComponent(stringifyPrimitive(obj[k]));\n      }\n    }).join(sep);\n\n  }\n\n  if (!name) return '';\n  return encodeURIComponent(stringifyPrimitive(name)) + eq +\n         encodeURIComponent(stringifyPrimitive(obj));\n};\n\nvar isArray = Array.isArray || function (xs) {\n  return Object.prototype.toString.call(xs) === '[object Array]';\n};\n\nfunction map (xs, f) {\n  if (xs.map) return xs.map(f);\n  var res = [];\n  for (var i = 0; i < xs.length; i++) {\n    res.push(f(xs[i], i));\n  }\n  return res;\n}\n\nvar objectKeys = Object.keys || function (obj) {\n  var res = [];\n  for (var key in obj) {\n    if (Object.prototype.hasOwnProperty.call(obj, key)) res.push(key);\n  }\n  return res;\n};\n",
    "'use strict';\n\nexports.decode = exports.parse = require('./decode');\nexports.encode = exports.stringify = require('./encode');\n",
    "'use strict';\nmodule.exports = function (str) {\n\treturn encodeURIComponent(str).replace(/[!'()*]/g, function (c) {\n\t\treturn '%' + c.charCodeAt(0).toString(16).toUpperCase();\n\t});\n};\n",
    "var nargs = /\\{([0-9a-zA-Z_]+)\\}/g\n\nmodule.exports = template\n\nfunction template(string) {\n    var args\n\n    if (arguments.length === 2 && typeof arguments[1] === \"object\") {\n        args = arguments[1]\n    } else {\n        args = new Array(arguments.length - 1)\n        for (var i = 1; i < arguments.length; ++i) {\n            args[i - 1] = arguments[i]\n        }\n    }\n\n    if (!args || !args.hasOwnProperty) {\n        args = {}\n    }\n\n    return string.replace(nargs, function replaceArg(match, i, index) {\n        var result\n\n        if (string[index - 1] === \"{\" &&\n            string[index + match.length] === \"}\") {\n            return i\n        } else {\n            result = args.hasOwnProperty(i) ? args[i] : null\n            if (result === null || result === undefined) {\n                return \"\"\n            }\n\n            return result\n        }\n    })\n}\n",
    "'use strict';\n\nmodule.exports = WebSocket;\n",
    "// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n'use strict';\n\nvar punycode = require('punycode');\nvar util = require('./util');\n\nexports.parse = urlParse;\nexports.resolve = urlResolve;\nexports.resolveObject = urlResolveObject;\nexports.format = urlFormat;\n\nexports.Url = Url;\n\nfunction Url() {\n  this.protocol = null;\n  this.slashes = null;\n  this.auth = null;\n  this.host = null;\n  this.port = null;\n  this.hostname = null;\n  this.hash = null;\n  this.search = null;\n  this.query = null;\n  this.pathname = null;\n  this.path = null;\n  this.href = null;\n}\n\n// Reference: RFC 3986, RFC 1808, RFC 2396\n\n// define these here so at least they only have to be\n// compiled once on the first module load.\nvar protocolPattern = /^([a-z0-9.+-]+:)/i,\n    portPattern = /:[0-9]*$/,\n\n    // Special case for a simple path URL\n    simplePathPattern = /^(\\/\\/?(?!\\/)[^\\?\\s]*)(\\?[^\\s]*)?$/,\n\n    // RFC 2396: characters reserved for delimiting URLs.\n    // We actually just auto-escape these.\n    delims = ['<', '>', '\"', '`', ' ', '\\r', '\\n', '\\t'],\n\n    // RFC 2396: characters not allowed for various reasons.\n    unwise = ['{', '}', '|', '\\\\', '^', '`'].concat(delims),\n\n    // Allowed by RFCs, but cause of XSS attacks.  Always escape these.\n    autoEscape = ['\\''].concat(unwise),\n    // Characters that are never ever allowed in a hostname.\n    // Note that any invalid chars are also handled, but these\n    // are the ones that are *expected* to be seen, so we fast-path\n    // them.\n    nonHostChars = ['%', '/', '?', ';', '#'].concat(autoEscape),\n    hostEndingChars = ['/', '?', '#'],\n    hostnameMaxLen = 255,\n    hostnamePartPattern = /^[+a-z0-9A-Z_-]{0,63}$/,\n    hostnamePartStart = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,\n    // protocols that can allow \"unsafe\" and \"unwise\" chars.\n    unsafeProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that never have a hostname.\n    hostlessProtocol = {\n      'javascript': true,\n      'javascript:': true\n    },\n    // protocols that always contain a // bit.\n    slashedProtocol = {\n      'http': true,\n      'https': true,\n      'ftp': true,\n      'gopher': true,\n      'file': true,\n      'http:': true,\n      'https:': true,\n      'ftp:': true,\n      'gopher:': true,\n      'file:': true\n    },\n    querystring = require('querystring');\n\nfunction urlParse(url, parseQueryString, slashesDenoteHost) {\n  if (url && util.isObject(url) && url instanceof Url) return url;\n\n  var u = new Url;\n  u.parse(url, parseQueryString, slashesDenoteHost);\n  return u;\n}\n\nUrl.prototype.parse = function(url, parseQueryString, slashesDenoteHost) {\n  if (!util.isString(url)) {\n    throw new TypeError(\"Parameter 'url' must be a string, not \" + typeof url);\n  }\n\n  // Copy chrome, IE, opera backslash-handling behavior.\n  // Back slashes before the query string get converted to forward slashes\n  // See: https://code.google.com/p/chromium/issues/detail?id=25916\n  var queryIndex = url.indexOf('?'),\n      splitter =\n          (queryIndex !== -1 && queryIndex < url.indexOf('#')) ? '?' : '#',\n      uSplit = url.split(splitter),\n      slashRegex = /\\\\/g;\n  uSplit[0] = uSplit[0].replace(slashRegex, '/');\n  url = uSplit.join(splitter);\n\n  var rest = url;\n\n  // trim before proceeding.\n  // This is to support parse stuff like \"  http://foo.com  \\n\"\n  rest = rest.trim();\n\n  if (!slashesDenoteHost && url.split('#').length === 1) {\n    // Try fast path regexp\n    var simplePath = simplePathPattern.exec(rest);\n    if (simplePath) {\n      this.path = rest;\n      this.href = rest;\n      this.pathname = simplePath[1];\n      if (simplePath[2]) {\n        this.search = simplePath[2];\n        if (parseQueryString) {\n          this.query = querystring.parse(this.search.substr(1));\n        } else {\n          this.query = this.search.substr(1);\n        }\n      } else if (parseQueryString) {\n        this.search = '';\n        this.query = {};\n      }\n      return this;\n    }\n  }\n\n  var proto = protocolPattern.exec(rest);\n  if (proto) {\n    proto = proto[0];\n    var lowerProto = proto.toLowerCase();\n    this.protocol = lowerProto;\n    rest = rest.substr(proto.length);\n  }\n\n  // figure out if it's got a host\n  // user@server is *always* interpreted as a hostname, and url\n  // resolution will treat //foo/bar as host=foo,path=bar because that's\n  // how the browser resolves relative URLs.\n  if (slashesDenoteHost || proto || rest.match(/^\\/\\/[^@\\/]+@[^@\\/]+/)) {\n    var slashes = rest.substr(0, 2) === '//';\n    if (slashes && !(proto && hostlessProtocol[proto])) {\n      rest = rest.substr(2);\n      this.slashes = true;\n    }\n  }\n\n  if (!hostlessProtocol[proto] &&\n      (slashes || (proto && !slashedProtocol[proto]))) {\n\n    // there's a hostname.\n    // the first instance of /, ?, ;, or # ends the host.\n    //\n    // If there is an @ in the hostname, then non-host chars *are* allowed\n    // to the left of the last @ sign, unless some host-ending character\n    // comes *before* the @-sign.\n    // URLs are obnoxious.\n    //\n    // ex:\n    // http://a@b@c/ => user:a@b host:c\n    // http://a@b?@c => user:a host:c path:/?@c\n\n    // v0.12 TODO(isaacs): This is not quite how Chrome does things.\n    // Review our test case against browsers more comprehensively.\n\n    // find the first instance of any hostEndingChars\n    var hostEnd = -1;\n    for (var i = 0; i < hostEndingChars.length; i++) {\n      var hec = rest.indexOf(hostEndingChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n\n    // at this point, either we have an explicit point where the\n    // auth portion cannot go past, or the last @ char is the decider.\n    var auth, atSign;\n    if (hostEnd === -1) {\n      // atSign can be anywhere.\n      atSign = rest.lastIndexOf('@');\n    } else {\n      // atSign must be in auth portion.\n      // http://a@b/c@d => host:b auth:a path:/c@d\n      atSign = rest.lastIndexOf('@', hostEnd);\n    }\n\n    // Now we have a portion which is definitely the auth.\n    // Pull that off.\n    if (atSign !== -1) {\n      auth = rest.slice(0, atSign);\n      rest = rest.slice(atSign + 1);\n      this.auth = decodeURIComponent(auth);\n    }\n\n    // the host is the remaining to the left of the first non-host char\n    hostEnd = -1;\n    for (var i = 0; i < nonHostChars.length; i++) {\n      var hec = rest.indexOf(nonHostChars[i]);\n      if (hec !== -1 && (hostEnd === -1 || hec < hostEnd))\n        hostEnd = hec;\n    }\n    // if we still have not hit it, then the entire thing is a host.\n    if (hostEnd === -1)\n      hostEnd = rest.length;\n\n    this.host = rest.slice(0, hostEnd);\n    rest = rest.slice(hostEnd);\n\n    // pull out port.\n    this.parseHost();\n\n    // we've indicated that there is a hostname,\n    // so even if it's empty, it has to be present.\n    this.hostname = this.hostname || '';\n\n    // if hostname begins with [ and ends with ]\n    // assume that it's an IPv6 address.\n    var ipv6Hostname = this.hostname[0] === '[' &&\n        this.hostname[this.hostname.length - 1] === ']';\n\n    // validate a little.\n    if (!ipv6Hostname) {\n      var hostparts = this.hostname.split(/\\./);\n      for (var i = 0, l = hostparts.length; i < l; i++) {\n        var part = hostparts[i];\n        if (!part) continue;\n        if (!part.match(hostnamePartPattern)) {\n          var newpart = '';\n          for (var j = 0, k = part.length; j < k; j++) {\n            if (part.charCodeAt(j) > 127) {\n              // we replace non-ASCII char with a temporary placeholder\n              // we need this to make sure size of hostname is not\n              // broken by replacing non-ASCII by nothing\n              newpart += 'x';\n            } else {\n              newpart += part[j];\n            }\n          }\n          // we test again with ASCII char only\n          if (!newpart.match(hostnamePartPattern)) {\n            var validParts = hostparts.slice(0, i);\n            var notHost = hostparts.slice(i + 1);\n            var bit = part.match(hostnamePartStart);\n            if (bit) {\n              validParts.push(bit[1]);\n              notHost.unshift(bit[2]);\n            }\n            if (notHost.length) {\n              rest = '/' + notHost.join('.') + rest;\n            }\n            this.hostname = validParts.join('.');\n            break;\n          }\n        }\n      }\n    }\n\n    if (this.hostname.length > hostnameMaxLen) {\n      this.hostname = '';\n    } else {\n      // hostnames are always lower case.\n      this.hostname = this.hostname.toLowerCase();\n    }\n\n    if (!ipv6Hostname) {\n      // IDNA Support: Returns a punycoded representation of \"domain\".\n      // It only converts parts of the domain name that\n      // have non-ASCII characters, i.e. it doesn't matter if\n      // you call it with a domain that already is ASCII-only.\n      this.hostname = punycode.toASCII(this.hostname);\n    }\n\n    var p = this.port ? ':' + this.port : '';\n    var h = this.hostname || '';\n    this.host = h + p;\n    this.href += this.host;\n\n    // strip [ and ] from the hostname\n    // the host field still retains them, though\n    if (ipv6Hostname) {\n      this.hostname = this.hostname.substr(1, this.hostname.length - 2);\n      if (rest[0] !== '/') {\n        rest = '/' + rest;\n      }\n    }\n  }\n\n  // now rest is set to the post-host stuff.\n  // chop off any delim chars.\n  if (!unsafeProtocol[lowerProto]) {\n\n    // First, make 100% sure that any \"autoEscape\" chars get\n    // escaped, even if encodeURIComponent doesn't think they\n    // need to be.\n    for (var i = 0, l = autoEscape.length; i < l; i++) {\n      var ae = autoEscape[i];\n      if (rest.indexOf(ae) === -1)\n        continue;\n      var esc = encodeURIComponent(ae);\n      if (esc === ae) {\n        esc = escape(ae);\n      }\n      rest = rest.split(ae).join(esc);\n    }\n  }\n\n\n  // chop off from the tail first.\n  var hash = rest.indexOf('#');\n  if (hash !== -1) {\n    // got a fragment string.\n    this.hash = rest.substr(hash);\n    rest = rest.slice(0, hash);\n  }\n  var qm = rest.indexOf('?');\n  if (qm !== -1) {\n    this.search = rest.substr(qm);\n    this.query = rest.substr(qm + 1);\n    if (parseQueryString) {\n      this.query = querystring.parse(this.query);\n    }\n    rest = rest.slice(0, qm);\n  } else if (parseQueryString) {\n    // no query string, but parseQueryString still requested\n    this.search = '';\n    this.query = {};\n  }\n  if (rest) this.pathname = rest;\n  if (slashedProtocol[lowerProto] &&\n      this.hostname && !this.pathname) {\n    this.pathname = '/';\n  }\n\n  //to support http.request\n  if (this.pathname || this.search) {\n    var p = this.pathname || '';\n    var s = this.search || '';\n    this.path = p + s;\n  }\n\n  // finally, reconstruct the href based on what has been validated.\n  this.href = this.format();\n  return this;\n};\n\n// format a parsed object into a url string\nfunction urlFormat(obj) {\n  // ensure it's an object, and not a string url.\n  // If it's an obj, this is a no-op.\n  // this way, you can call url_format() on strings\n  // to clean up potentially wonky urls.\n  if (util.isString(obj)) obj = urlParse(obj);\n  if (!(obj instanceof Url)) return Url.prototype.format.call(obj);\n  return obj.format();\n}\n\nUrl.prototype.format = function() {\n  var auth = this.auth || '';\n  if (auth) {\n    auth = encodeURIComponent(auth);\n    auth = auth.replace(/%3A/i, ':');\n    auth += '@';\n  }\n\n  var protocol = this.protocol || '',\n      pathname = this.pathname || '',\n      hash = this.hash || '',\n      host = false,\n      query = '';\n\n  if (this.host) {\n    host = auth + this.host;\n  } else if (this.hostname) {\n    host = auth + (this.hostname.indexOf(':') === -1 ?\n        this.hostname :\n        '[' + this.hostname + ']');\n    if (this.port) {\n      host += ':' + this.port;\n    }\n  }\n\n  if (this.query &&\n      util.isObject(this.query) &&\n      Object.keys(this.query).length) {\n    query = querystring.stringify(this.query);\n  }\n\n  var search = this.search || (query && ('?' + query)) || '';\n\n  if (protocol && protocol.substr(-1) !== ':') protocol += ':';\n\n  // only the slashedProtocols get the //.  Not mailto:, xmpp:, etc.\n  // unless they had them to begin with.\n  if (this.slashes ||\n      (!protocol || slashedProtocol[protocol]) && host !== false) {\n    host = '//' + (host || '');\n    if (pathname && pathname.charAt(0) !== '/') pathname = '/' + pathname;\n  } else if (!host) {\n    host = '';\n  }\n\n  if (hash && hash.charAt(0) !== '#') hash = '#' + hash;\n  if (search && search.charAt(0) !== '?') search = '?' + search;\n\n  pathname = pathname.replace(/[?#]/g, function(match) {\n    return encodeURIComponent(match);\n  });\n  search = search.replace('#', '%23');\n\n  return protocol + host + pathname + search + hash;\n};\n\nfunction urlResolve(source, relative) {\n  return urlParse(source, false, true).resolve(relative);\n}\n\nUrl.prototype.resolve = function(relative) {\n  return this.resolveObject(urlParse(relative, false, true)).format();\n};\n\nfunction urlResolveObject(source, relative) {\n  if (!source) return relative;\n  return urlParse(source, false, true).resolveObject(relative);\n}\n\nUrl.prototype.resolveObject = function(relative) {\n  if (util.isString(relative)) {\n    var rel = new Url();\n    rel.parse(relative, false, true);\n    relative = rel;\n  }\n\n  var result = new Url();\n  var tkeys = Object.keys(this);\n  for (var tk = 0; tk < tkeys.length; tk++) {\n    var tkey = tkeys[tk];\n    result[tkey] = this[tkey];\n  }\n\n  // hash is always overridden, no matter what.\n  // even href=\"\" will remove it.\n  result.hash = relative.hash;\n\n  // if the relative url is empty, then there's nothing left to do here.\n  if (relative.href === '') {\n    result.href = result.format();\n    return result;\n  }\n\n  // hrefs like //foo/bar always cut to the protocol.\n  if (relative.slashes && !relative.protocol) {\n    // take everything except the protocol from relative\n    var rkeys = Object.keys(relative);\n    for (var rk = 0; rk < rkeys.length; rk++) {\n      var rkey = rkeys[rk];\n      if (rkey !== 'protocol')\n        result[rkey] = relative[rkey];\n    }\n\n    //urlParse appends trailing / to urls like http://www.example.com\n    if (slashedProtocol[result.protocol] &&\n        result.hostname && !result.pathname) {\n      result.path = result.pathname = '/';\n    }\n\n    result.href = result.format();\n    return result;\n  }\n\n  if (relative.protocol && relative.protocol !== result.protocol) {\n    // if it's a known url protocol, then changing\n    // the protocol does weird things\n    // first, if it's not file:, then we MUST have a host,\n    // and if there was a path\n    // to begin with, then we MUST have a path.\n    // if it is file:, then the host is dropped,\n    // because that's known to be hostless.\n    // anything else is assumed to be absolute.\n    if (!slashedProtocol[relative.protocol]) {\n      var keys = Object.keys(relative);\n      for (var v = 0; v < keys.length; v++) {\n        var k = keys[v];\n        result[k] = relative[k];\n      }\n      result.href = result.format();\n      return result;\n    }\n\n    result.protocol = relative.protocol;\n    if (!relative.host && !hostlessProtocol[relative.protocol]) {\n      var relPath = (relative.pathname || '').split('/');\n      while (relPath.length && !(relative.host = relPath.shift()));\n      if (!relative.host) relative.host = '';\n      if (!relative.hostname) relative.hostname = '';\n      if (relPath[0] !== '') relPath.unshift('');\n      if (relPath.length < 2) relPath.unshift('');\n      result.pathname = relPath.join('/');\n    } else {\n      result.pathname = relative.pathname;\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    result.host = relative.host || '';\n    result.auth = relative.auth;\n    result.hostname = relative.hostname || relative.host;\n    result.port = relative.port;\n    // to support http.request\n    if (result.pathname || result.search) {\n      var p = result.pathname || '';\n      var s = result.search || '';\n      result.path = p + s;\n    }\n    result.slashes = result.slashes || relative.slashes;\n    result.href = result.format();\n    return result;\n  }\n\n  var isSourceAbs = (result.pathname && result.pathname.charAt(0) === '/'),\n      isRelAbs = (\n          relative.host ||\n          relative.pathname && relative.pathname.charAt(0) === '/'\n      ),\n      mustEndAbs = (isRelAbs || isSourceAbs ||\n                    (result.host && relative.pathname)),\n      removeAllDots = mustEndAbs,\n      srcPath = result.pathname && result.pathname.split('/') || [],\n      relPath = relative.pathname && relative.pathname.split('/') || [],\n      psychotic = result.protocol && !slashedProtocol[result.protocol];\n\n  // if the url is a non-slashed url, then relative\n  // links like ../.. should be able\n  // to crawl up to the hostname, as well.  This is strange.\n  // result.protocol has already been set by now.\n  // Later on, put the first path part into the host field.\n  if (psychotic) {\n    result.hostname = '';\n    result.port = null;\n    if (result.host) {\n      if (srcPath[0] === '') srcPath[0] = result.host;\n      else srcPath.unshift(result.host);\n    }\n    result.host = '';\n    if (relative.protocol) {\n      relative.hostname = null;\n      relative.port = null;\n      if (relative.host) {\n        if (relPath[0] === '') relPath[0] = relative.host;\n        else relPath.unshift(relative.host);\n      }\n      relative.host = null;\n    }\n    mustEndAbs = mustEndAbs && (relPath[0] === '' || srcPath[0] === '');\n  }\n\n  if (isRelAbs) {\n    // it's absolute.\n    result.host = (relative.host || relative.host === '') ?\n                  relative.host : result.host;\n    result.hostname = (relative.hostname || relative.hostname === '') ?\n                      relative.hostname : result.hostname;\n    result.search = relative.search;\n    result.query = relative.query;\n    srcPath = relPath;\n    // fall through to the dot-handling below.\n  } else if (relPath.length) {\n    // it's relative\n    // throw away the existing file, and take the new path instead.\n    if (!srcPath) srcPath = [];\n    srcPath.pop();\n    srcPath = srcPath.concat(relPath);\n    result.search = relative.search;\n    result.query = relative.query;\n  } else if (!util.isNullOrUndefined(relative.search)) {\n    // just pull out the search.\n    // like href='?foo'.\n    // Put this after the other two cases because it simplifies the booleans\n    if (psychotic) {\n      result.hostname = result.host = srcPath.shift();\n      //occationaly the auth can get stuck only in host\n      //this especially happens in cases like\n      //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n      var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                       result.host.split('@') : false;\n      if (authInHost) {\n        result.auth = authInHost.shift();\n        result.host = result.hostname = authInHost.shift();\n      }\n    }\n    result.search = relative.search;\n    result.query = relative.query;\n    //to support http.request\n    if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n      result.path = (result.pathname ? result.pathname : '') +\n                    (result.search ? result.search : '');\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  if (!srcPath.length) {\n    // no path at all.  easy.\n    // we've already handled the other stuff above.\n    result.pathname = null;\n    //to support http.request\n    if (result.search) {\n      result.path = '/' + result.search;\n    } else {\n      result.path = null;\n    }\n    result.href = result.format();\n    return result;\n  }\n\n  // if a url ENDs in . or .., then it must get a trailing slash.\n  // however, if it ends in anything else non-slashy,\n  // then it must NOT get a trailing slash.\n  var last = srcPath.slice(-1)[0];\n  var hasTrailingSlash = (\n      (result.host || relative.host || srcPath.length > 1) &&\n      (last === '.' || last === '..') || last === '');\n\n  // strip single dots, resolve double dots to parent dir\n  // if the path tries to go above the root, `up` ends up > 0\n  var up = 0;\n  for (var i = srcPath.length; i >= 0; i--) {\n    last = srcPath[i];\n    if (last === '.') {\n      srcPath.splice(i, 1);\n    } else if (last === '..') {\n      srcPath.splice(i, 1);\n      up++;\n    } else if (up) {\n      srcPath.splice(i, 1);\n      up--;\n    }\n  }\n\n  // if the path is allowed to go above the root, restore leading ..s\n  if (!mustEndAbs && !removeAllDots) {\n    for (; up--; up) {\n      srcPath.unshift('..');\n    }\n  }\n\n  if (mustEndAbs && srcPath[0] !== '' &&\n      (!srcPath[0] || srcPath[0].charAt(0) !== '/')) {\n    srcPath.unshift('');\n  }\n\n  if (hasTrailingSlash && (srcPath.join('/').substr(-1) !== '/')) {\n    srcPath.push('');\n  }\n\n  var isAbsolute = srcPath[0] === '' ||\n      (srcPath[0] && srcPath[0].charAt(0) === '/');\n\n  // put the host back\n  if (psychotic) {\n    result.hostname = result.host = isAbsolute ? '' :\n                                    srcPath.length ? srcPath.shift() : '';\n    //occationaly the auth can get stuck only in host\n    //this especially happens in cases like\n    //url.resolveObject('mailto:local1@domain1', 'local2@domain2')\n    var authInHost = result.host && result.host.indexOf('@') > 0 ?\n                     result.host.split('@') : false;\n    if (authInHost) {\n      result.auth = authInHost.shift();\n      result.host = result.hostname = authInHost.shift();\n    }\n  }\n\n  mustEndAbs = mustEndAbs || (result.host && srcPath.length);\n\n  if (mustEndAbs && !isAbsolute) {\n    srcPath.unshift('');\n  }\n\n  if (!srcPath.length) {\n    result.pathname = null;\n    result.path = null;\n  } else {\n    result.pathname = srcPath.join('/');\n  }\n\n  //to support request.http\n  if (!util.isNull(result.pathname) || !util.isNull(result.search)) {\n    result.path = (result.pathname ? result.pathname : '') +\n                  (result.search ? result.search : '');\n  }\n  result.auth = relative.auth || result.auth;\n  result.slashes = result.slashes || relative.slashes;\n  result.href = result.format();\n  return result;\n};\n\nUrl.prototype.parseHost = function() {\n  var host = this.host;\n  var port = portPattern.exec(host);\n  if (port) {\n    port = port[0];\n    if (port !== ':') {\n      this.port = port.substr(1);\n    }\n    host = host.substr(0, host.length - port.length);\n  }\n  if (host) this.hostname = host;\n};\n",
    "'use strict';\n\nmodule.exports = {\n  isString: function(arg) {\n    return typeof(arg) === 'string';\n  },\n  isObject: function(arg) {\n    return typeof(arg) === 'object' && arg !== null;\n  },\n  isNull: function(arg) {\n    return arg === null;\n  },\n  isNullOrUndefined: function(arg) {\n    return arg == null;\n  }\n};\n",
    "(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  if (support.arrayBuffer) {\n    var viewClasses = [\n      '[object Int8Array]',\n      '[object Uint8Array]',\n      '[object Uint8ClampedArray]',\n      '[object Int16Array]',\n      '[object Uint16Array]',\n      '[object Int32Array]',\n      '[object Uint32Array]',\n      '[object Float32Array]',\n      '[object Float64Array]'\n    ]\n\n    var isDataView = function(obj) {\n      return obj && DataView.prototype.isPrototypeOf(obj)\n    }\n\n    var isArrayBufferView = ArrayBuffer.isView || function(obj) {\n      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1\n    }\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n    } else if (Array.isArray(headers)) {\n      headers.forEach(function(header) {\n        this.append(header[0], header[1])\n      }, this)\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var oldValue = this.map[name]\n    this.map[name] = oldValue ? oldValue+','+value : value\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    name = normalizeName(name)\n    return this.has(name) ? this.map[name] : null\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = normalizeValue(value)\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    for (var name in this.map) {\n      if (this.map.hasOwnProperty(name)) {\n        callback.call(thisArg, this.map[name], name, this)\n      }\n    }\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsArrayBuffer(blob)\n    return promise\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    var promise = fileReaderReady(reader)\n    reader.readAsText(blob)\n    return promise\n  }\n\n  function readArrayBufferAsText(buf) {\n    var view = new Uint8Array(buf)\n    var chars = new Array(view.length)\n\n    for (var i = 0; i < view.length; i++) {\n      chars[i] = String.fromCharCode(view[i])\n    }\n    return chars.join('')\n  }\n\n  function bufferClone(buf) {\n    if (buf.slice) {\n      return buf.slice(0)\n    } else {\n      var view = new Uint8Array(buf.byteLength)\n      view.set(new Uint8Array(buf))\n      return view.buffer\n    }\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (!body) {\n        this._bodyText = ''\n      } else if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (support.arrayBuffer && support.blob && isDataView(body)) {\n        this._bodyArrayBuffer = bufferClone(body.buffer)\n        // IE 10-11 can't handle a DataView body.\n        this._bodyInit = new Blob([this._bodyArrayBuffer])\n      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {\n        this._bodyArrayBuffer = bufferClone(body)\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyArrayBuffer) {\n          return Promise.resolve(new Blob([this._bodyArrayBuffer]))\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        if (this._bodyArrayBuffer) {\n          return consumed(this) || Promise.resolve(this._bodyArrayBuffer)\n        } else {\n          return this.blob().then(readBlobAsArrayBuffer)\n        }\n      }\n    }\n\n    this.text = function() {\n      var rejected = consumed(this)\n      if (rejected) {\n        return rejected\n      }\n\n      if (this._bodyBlob) {\n        return readBlobAsText(this._bodyBlob)\n      } else if (this._bodyArrayBuffer) {\n        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))\n      } else if (this._bodyFormData) {\n        throw new Error('could not read FormData body as text')\n      } else {\n        return Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n\n    if (input instanceof Request) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body && input._bodyInit != null) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = String(input)\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this, { body: this._bodyInit })\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function parseHeaders(rawHeaders) {\n    var headers = new Headers()\n    rawHeaders.split(/\\r?\\n/).forEach(function(line) {\n      var parts = line.split(':')\n      var key = parts.shift().trim()\n      if (key) {\n        var value = parts.join(':').trim()\n        headers.append(key, value)\n      }\n    })\n    return headers\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = 'status' in options ? options.status : 200\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = 'statusText' in options ? options.statusText : 'OK'\n    this.headers = new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request = new Request(input, init)\n      var xhr = new XMLHttpRequest()\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: parseHeaders(xhr.getAllResponseHeaders() || '')\n        }\n        options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n",
    "const EventEmitter = require('events');\r\nconst Transport = require('./transports/base/Transport');\r\nconst HTTP = require('./transports/HTTP');\r\nconst WS = require('./transports/WS');\r\nconst API = require(`./controllers/API`);\r\nconst ApiMap = require(`./controllers/transportResolvers/ApiMap`);\r\nconst Utils = require('./utils/Utils');\r\nconst UnsupportedTransportError = require('./error/UnsupportedTransportError');\r\n\r\n\r\n/**\r\n * ApiStrategy. This class handles all transport specific moments\r\n * @event message\r\n * @event error\r\n*/\r\nclass ApiStrategy extends EventEmitter {\r\n\r\n    static get MESSAGE_EVENT() { return Transport.MESSAGE_EVENT; }\r\n    static get ERROR_EVENT() { return Transport.ERROR_EVENT; }\r\n\r\n    /**\r\n     * Returns transport by url\r\n     * @param url\r\n     * @returns Transport Class\r\n     */\r\n    static getTransport(url) {\r\n        if (url.startsWith(HTTP.TYPE)) {\r\n            return HTTP;\r\n        } else if (url.startsWith(WS.TYPE)) {\r\n            return WS;\r\n        } else {\r\n            throw new UnsupportedTransportError();\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Creates ApiStrategy\r\n     * @param {object} urls ({ mainServiceURL, authServiceURL, pluginServiceURL })\r\n     */\r\n    constructor({ mainServiceURL, authServiceURL, pluginServiceURL }) {\r\n        super();\r\n\r\n        const me = this;\r\n\r\n        me.subscriptionMap = new Map();\r\n        me.subscriptionIdsMap = new Map();\r\n        me.subscriptionLastTimestampMap = new Map();\r\n        me.reconnectionHandler = null;\r\n        me.reAuthorizationHandler = null;\r\n\r\n        me.urlsMap = new Map();\r\n\r\n        me.urlsMap.set(API.MAIN_BASE, mainServiceURL);\r\n        me.urlsMap.set(API.AUTH_BASE, authServiceURL);\r\n        me.urlsMap.set(API.PLUGIN_BASE, pluginServiceURL);\r\n\r\n        me.transport = new (ApiStrategy.getTransport(mainServiceURL))({ url: mainServiceURL });\r\n\r\n        me._initTransportSpecificFunctionality();\r\n\r\n        me.transport.on(Transport.MESSAGE_EVENT, (message) => {\r\n            switch (me.transport.type) {\r\n                case HTTP.TYPE:\r\n                    if (message.subscriptionId) {\r\n                        message.subscriptionId = me._internalSubscriptionIdToExternal(message.subscriptionId);\r\n                    }\r\n\r\n                    if (message.subscriptionId && message.timestamp) {\r\n                        me.subscriptionLastTimestampMap.set(message.subscriptionId, message.timestamp)\r\n                    }\r\n\r\n                    me.emit(ApiStrategy.MESSAGE_EVENT, message);\r\n                    break;\r\n                case WS.TYPE:\r\n                    if (message.subscriptionId && message.action) {\r\n                        const messageData = message[message.action.split(`/`).shift()];\r\n\r\n                        messageData.subscriptionId = me._internalSubscriptionIdToExternal(message.subscriptionId);\r\n\r\n                        if (messageData.timestamp) {\r\n                            me.subscriptionLastTimestampMap.set(messageData.subscriptionId, messageData.timestamp)\r\n                        }\r\n\r\n                        me.emit(ApiStrategy.MESSAGE_EVENT, messageData);\r\n                    } else {\r\n                        me.emit(ApiStrategy.MESSAGE_EVENT, message);\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n\r\n        me.transport.on(Transport.RECONNECTED_EVENT, () => {\r\n            if (me.reAuthorizationHandler) {\r\n                const subscriptionKeys = Array.from(me.subscriptionMap.keys());\r\n                const subscriptionValues = Array.from(me.subscriptionMap.values());\r\n\r\n                me.reAuthorizationHandler()\r\n                    .then(() => Promise.all(subscriptionValues\r\n                        .map(({ key, parameters, body }) => me.send(key, parameters, body))))\r\n                    .then(() => subscriptionKeys\r\n                        .forEach((subscriptionId) => me.subscriptionMap.delete(subscriptionId)))\r\n                    .catch((error) => me.emit(ApiStrategy.ERROR_EVENT, error));\r\n            }\r\n        });\r\n\r\n        me.transport.on(Transport.ERROR_EVENT, (error) => me.emit(ApiStrategy.ERROR_EVENT, error));\r\n    }\r\n\r\n    get reconnectionAttempts() {\r\n        const me = this;\r\n\r\n        return me.transport.reconnectionAttempts;\r\n    }\r\n\r\n    set reconnectionAttempts(value) {\r\n        const me = this;\r\n\r\n        me.transport.reconnectionAttempts = value;\r\n    }\r\n\r\n    get reconnectionInterval() {\r\n        const me = this;\r\n\r\n        return me.transport.reconnectionInterval;\r\n    }\r\n\r\n    set reconnectionInterval(value) {\r\n        const me = this;\r\n\r\n        me.transport.reconnectionInterval = value;\r\n    }\r\n\r\n    /**\r\n     * Connect transport\r\n     * @returns {Promise<any>}\r\n     */\r\n    connect() {\r\n        const me = this;\r\n\r\n        return me.transport.connect();\r\n    }\r\n\r\n    /**\r\n     * Authorize transport\r\n     * @param accessToken\r\n     * @returns {Promise}\r\n     */\r\n    authorize(accessToken) {\r\n        const me = this;\r\n\r\n        me.reAuthorizationHandler = () => me.transport.authenticate(accessToken);\r\n\r\n        return me.transport.authenticate(accessToken);\r\n    }\r\n\r\n    /**\r\n     * Send message via transport\r\n     * @param key\r\n     * @param parameters\r\n     * @param body\r\n     */\r\n    send(key, parameters, body) {\r\n        const me = this;\r\n        const isSubscription = ApiMap.isSubscription(key);\r\n        const isUnsubscription = ApiMap.isUnsubscription(key);\r\n        let externalSubscriptionId, internalSubscriptionId;\r\n\r\n        if (isSubscription) {\r\n            me.subscriptionMap.forEach((subscriptionArguments, subscriptionId) => {\r\n                if (subscriptionArguments.key === key &&\r\n                    subscriptionArguments.parameters === parameters &&\r\n                    subscriptionArguments.body === body) {\r\n                    externalSubscriptionId = me._internalSubscriptionIdToExternal(subscriptionId);\r\n                    internalSubscriptionId = subscriptionId;\r\n                    parameters.timestamp = me.subscriptionLastTimestampMap.get(externalSubscriptionId);\r\n                }\r\n            });\r\n        } else if (isUnsubscription) {\r\n            externalSubscriptionId = parameters.subscriptionId;\r\n            parameters.subscriptionId = me.subscriptionIdsMap.get(externalSubscriptionId);\r\n        }\r\n\r\n        const sendData = API.build(me.transport.type, key, parameters, body);\r\n\r\n        switch (me.transport.type) {\r\n            case HTTP.TYPE:\r\n                sendData.endpoint = `${me.urlsMap.get(sendData.base)}${sendData.endpoint}`;\r\n                break;\r\n            case WS.TYPE:\r\n                sendData.requestId = Utils.randomString();\r\n                break;\r\n        }\r\n\r\n        function handleResponse(response) {\r\n            let normalizedResponse = API.normalizeResponse(me.transport.type, key, response);\r\n\r\n            if (isSubscription) {\r\n                let newExternalSubscriptionId;\r\n\r\n                if (internalSubscriptionId) {\r\n                    me.subscriptionIdsMap.forEach((internalSubId, externalSubId) => {\r\n                        if (internalSubscriptionId === internalSubId) {\r\n                            newExternalSubscriptionId = externalSubId;\r\n                        }\r\n                    });\r\n                } else {\r\n                    newExternalSubscriptionId = Utils.randomString();\r\n                }\r\n\r\n                me.subscriptionMap.set(normalizedResponse.subscriptionId, { key, parameters, body });\r\n                me.subscriptionIdsMap.set(newExternalSubscriptionId, normalizedResponse.subscriptionId);\r\n                normalizedResponse = { subscriptionId: newExternalSubscriptionId };\r\n            } else if (isUnsubscription) {\r\n                me.subscriptionMap.delete(parameters.subscriptionId);\r\n                me.subscriptionIdsMap.delete(externalSubscriptionId);\r\n            }\r\n\r\n            return normalizedResponse;\r\n        }\r\n\r\n        return me.transport.send(sendData)\r\n            .then(handleResponse)\r\n            .catch(error => {\r\n                if (error === Utils.TOKEN_EXPIRED_MARK && me.reconnectionHandler) {\r\n                    return me.reconnectionHandler()\r\n                        .then(() => me.transport.send(sendData))\r\n                        .then(handleResponse)\r\n                        .catch((reconnectionError) => { throw reconnectionError });\r\n                } else {\r\n                    throw error;\r\n                }\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Disconnects transport\r\n     */\r\n    disconnect() {\r\n        const me = this;\r\n\r\n        me.transport.disconnect();\r\n    }\r\n\r\n    /**\r\n     * Initialize all transport specific functionality\r\n     * @private\r\n     */\r\n    _initTransportSpecificFunctionality() {\r\n        const me = this;\r\n\r\n        switch (me.transport.type) {\r\n            case HTTP.TYPE:\r\n                me.transport.initPingParameters(`${me.urlsMap.get(API.MAIN_BASE)}/info`, HTTP.GET_METHOD);\r\n                break;\r\n        }\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param subscriptionId\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    _externalSubscriptionIdToInternal(subscriptionId) {\r\n        const me = this;\r\n\r\n        return me.subscriptionIdsMap.get(subscriptionId) || subscriptionId;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param subscriptionId\r\n     * @returns {*}\r\n     * @private\r\n     */\r\n    _internalSubscriptionIdToExternal(subscriptionId){\r\n        const me = this;\r\n        let result = subscriptionId;\r\n\r\n        me.subscriptionIdsMap.forEach((internalSubId, externalSubId) => {\r\n           if (internalSubId === subscriptionId) {\r\n               result = externalSubId;\r\n           }\r\n        });\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = ApiStrategy;",
    "const Utils = require(`./utils/Utils`);\r\nconst EventEmitter = require('events');\r\nconst APIStrategy = require('./ApiStrategy');\r\nconst InfoAPI = require('./controllers/ServerInfoAPI');\r\nconst DeviceAPI = require('./controllers/DeviceAPI');\r\nconst DeviceTypeAPI = require('./controllers/DeviceTypeAPI');\r\nconst TokenAPI = require('./controllers/TokenAPI');\r\nconst NetworkAPI = require('./controllers/NetworkAPI');\r\nconst ConfigurationAPI = require('./controllers/ConfigurationAPI');\r\nconst CommandAPI = require('./controllers/DeviceCommandAPI');\r\nconst NotificationAPI = require('./controllers/DeviceNotificationAPI');\r\nconst UserAPI = require('./controllers/UserAPI');\r\nconst PluginAPI = require('./controllers/PluginAPI');\r\nconst Command = require(`./models/DeviceCommand`);\r\nconst Configuration = require(`./models/Configuration`);\r\nconst Device = require(`./models/Device`);\r\nconst DeviceType = require(`./models/DeviceType`);\r\nconst Network = require(`./models/Network`);\r\nconst Notification = require(`./models/DeviceNotification`);\r\nconst Plugin = require(`./models/Plugin`);\r\nconst UserToken = require(`./models/UserToken`);\r\nconst PluginToken = require(`./models/PluginToken`);\r\nconst User = require(`./models/User`);\r\nconst CommandGetQuery = require(`./models/query/CommandGetQuery`);\r\nconst CommandListQuery = require(`./models/query/CommandListQuery`);\r\nconst CommandPollManyQuery = require(`./models/query/CommandPollManyQuery`);\r\nconst CommandPollQuery = require(`./models/query/CommandPollQuery`);\r\nconst CommandWaitQuery = require(`./models/query/CommandWaitQuery`);\r\nconst DeviceCountQuery = require(`./models/query/DeviceCountQuery`);\r\nconst DeviceListQuery = require(`./models/query/DeviceListQuery`);\r\nconst DeviceTypeCountQuery = require(`./models/query/DeviceTypeCountQuery`);\r\nconst DeviceTypeListQuery = require(`./models/query/DeviceTypeListQuery`);\r\nconst DeviceTypeDeleteQuery = require('./models/query/DeviceTypeDeleteQuery');\r\nconst PluginUpdateQuery = require(`./models/query/PluginUpdateQuery`);\r\nconst NetworkCountQuery = require(`./models/query/NetworkCountQuery`);\r\nconst NetworkListQuery = require(`./models/query/NetworkListQuery`);\r\nconst NetworkDeleteQuery = require('./models/query/NetworkDeleteQuery');\r\nconst NotificationListQuery = require(`./models/query/NotificationListQuery`);\r\nconst NotificationPollManyQuery = require(`./models/query/NotificationPollManyQuery`);\r\nconst NotificationPollQuery = require(`./models/query/NotificationPollQuery`);\r\nconst UserCountQuery = require(`./models/query/UserCountQuery`);\r\nconst UserListQuery = require(`./models/query/UserListQuery`);\r\nconst PluginCountQuery = require(`./models/query/PluginCountQuery`);\r\nconst PluginListQuery = require(`./models/query/PluginListQuery`);\r\nconst PluginRegisterQuery = require(`./models/query/PluginRegisterQuery`);\r\nconst NoAuthCredentialsError = require('./error/NoAuthCredentialsError');\r\nconst InvalidCredentialsError = require('./error/InvalidCredentialsError');\r\n\r\n\r\n/**\r\n * DeviceHive module\r\n */\r\nclass DeviceHive extends EventEmitter {\r\n\r\n    static get MESSAGE_EVENT() { return APIStrategy.MESSAGE_EVENT; }\r\n    static get ERROR_EVENT() { return APIStrategy.ERROR_EVENT; }\r\n\r\n    /**\r\n     * @type {Object} - Returns DeviceHive models\r\n     */\r\n    static get models() {\r\n        return {\r\n            Command: Command,\r\n            Configuration: Configuration,\r\n            Device: Device,\r\n            DeviceType: DeviceType,\r\n            Network: Network,\r\n            Notification: Notification,\r\n            Plugin: Plugin,\r\n            PluginToken: PluginToken,\r\n            User: User,\r\n            UserToken: UserToken,\r\n            query: {\r\n                CommandGetQuery: CommandGetQuery,\r\n                CommandListQuery: CommandListQuery,\r\n                CommandPollManyQuery: CommandPollManyQuery,\r\n                CommandPollQuery: CommandPollQuery,\r\n                CommandWaitQuery: CommandWaitQuery,\r\n                DeviceCountQuery: DeviceCountQuery,\r\n                DeviceListQuery: DeviceListQuery,\r\n                DeviceTypeCountQuery: DeviceTypeCountQuery,\r\n                DeviceTypeListQuery: DeviceTypeListQuery,\r\n                DeviceTypeDeleteQuery: DeviceTypeDeleteQuery,\r\n                PluginUpdateQuery: PluginUpdateQuery,\r\n                NetworkCountQuery: NetworkCountQuery,\r\n                NetworkListQuery: NetworkListQuery,\r\n                NetworkDeleteQuery: NetworkDeleteQuery,\r\n                NotificationListQuery: NotificationListQuery,\r\n                NotificationPollManyQuery: NotificationPollManyQuery,\r\n                NotificationPollQuery: NotificationPollQuery,\r\n                UserCountQuery: UserCountQuery,\r\n                UserListQuery: UserListQuery,\r\n                PluginCountQuery: PluginCountQuery,\r\n                PluginListQuery: PluginListQuery,\r\n                PluginRegisterQuery: PluginRegisterQuery\r\n            }\r\n        };\r\n    }\r\n\r\n    /**\r\n     * DeviceHive module\r\n     * @param {object} options - Initial settings\r\n     * @param {string} [options.accessToken] - Access token\r\n     * @param {string} [options.refreshToken] - Refresh token\r\n     * @param {string} [options.login] - Login\r\n     * @param {string} [options.password] - Password\r\n     * @param {string} options.mainServiceURL - Main Service URL\r\n     * @param {string} [options.authServiceURL] - Auth Service URL (required only for http)\r\n     * @param {string} [options.pluginServiceURL] - Plugin Service URL (required only for http)\r\n     */\r\n    constructor({ mainServiceURL, authServiceURL, pluginServiceURL, accessToken, refreshToken, login, password, autoUpdateSession = true }) {\r\n        super();\r\n\r\n        const me = this;\r\n\r\n        me.accessToken = accessToken;\r\n        me.refreshToken = refreshToken;\r\n        me.login = login;\r\n        me.password = password;\r\n        me.autoUpdateSession = autoUpdateSession;\r\n\r\n        me.strategy = new APIStrategy({ mainServiceURL, authServiceURL, pluginServiceURL });\r\n\r\n        me.info = new InfoAPI({ strategy: me.strategy });\r\n        me.device = new DeviceAPI({ strategy: me.strategy });\r\n        me.token = new TokenAPI({ strategy: me.strategy });\r\n        me.network = new NetworkAPI({ strategy: me.strategy });\r\n        me.deviceType = new DeviceTypeAPI({ strategy: me.strategy });\r\n        me.configuration = new ConfigurationAPI({ strategy: me.strategy });\r\n        me.command = new CommandAPI({ strategy: me.strategy });\r\n        me.notification = new NotificationAPI({ strategy: me.strategy });\r\n        me.user = new UserAPI({ strategy: me.strategy });\r\n        me.plugin = new PluginAPI({ strategy: me.strategy });\r\n\r\n\r\n        me.strategy.on(APIStrategy.MESSAGE_EVENT, message => me.emit(DeviceHive.MESSAGE_EVENT, message));\r\n        me.strategy.on(APIStrategy.ERROR_EVENT, error => me.emit(DeviceHive.ERROR_EVENT, error && error.message ? error.message : error));\r\n\r\n        me.on(DeviceHive.ERROR_EVENT, Utils.emptyFn);\r\n    }\r\n\r\n    /**\r\n     * Connect to the DeviceHive service\r\n     * @returns {Promise<DeviceHive>}\r\n     */\r\n    async connect({ accessToken, refreshToken, login, password, reconnectionAttempts, reconnectionInterval } = {}) {\r\n        const me = this;\r\n\r\n        me.strategy.reconnectionAttempts = reconnectionAttempts;\r\n        me.strategy.reconnectionInterval = reconnectionInterval;\r\n\r\n        if (!accessToken && !refreshToken && !(login && password)) {\r\n            accessToken = accessToken || me.accessToken;\r\n            refreshToken = refreshToken || me.refreshToken;\r\n            login = login || me.login;\r\n            password = password || me.password;\r\n        }\r\n\r\n        if (accessToken || refreshToken || (login && password)) {\r\n            try {\r\n                await me.strategy.connect();\r\n\r\n                if (login && password) {\r\n                    const { accessToken, refreshToken } = await me.token.login(login, password);\r\n\r\n                    await me.strategy.authorize(accessToken);\r\n\r\n                    me.accessToken = accessToken;\r\n                    me.refreshToken = refreshToken;\r\n                } else if (refreshToken) {\r\n                    const { accessToken } = await me.token.refresh(refreshToken);\r\n\r\n                    await me.strategy.authorize(accessToken);\r\n\r\n                    me.accessToken = accessToken;\r\n                    me.refreshToken = refreshToken;\r\n                } else if (accessToken) {\r\n                    await me.strategy.authorize(accessToken);\r\n\r\n                    me.accessToken = accessToken;\r\n                }\r\n\r\n                if (me.autoUpdateSession === true) {\r\n                    const userTokens = await me.token.createUserToken(\r\n                        Utils.createUserTokenFromJWT(me.accessToken));\r\n\r\n                    me.accessToken = userTokens.accessToken;\r\n                    me.refreshToken = userTokens.refreshToken;\r\n                    me.strategy.reconnectionHandler = () => me.connect({ refreshToken: me.refreshToken });\r\n                }\r\n            } catch (error) {\r\n                throw new InvalidCredentialsError(error);\r\n            }\r\n        } else {\r\n            throw new NoAuthCredentialsError();\r\n        }\r\n\r\n        return me;\r\n    }\r\n\r\n    /**\r\n     * Disconnects from DeviceHive server\r\n     * @returns {*|void}\r\n     */\r\n    disconnect() {\r\n        const me = this;\r\n\r\n        return me.strategy.disconnect();\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceHive;",
    "const ApiMap = require(`./transportResolvers/ApiMap`);\r\n\r\n\r\n/**\r\n * API class\r\n */\r\nclass API {\r\n\r\n    static get MAIN_BASE() { return ApiMap.MAIN_BASE; }\r\n    static get AUTH_BASE() { return ApiMap.AUTH_BASE; }\r\n    static get PLUGIN_BASE() { return ApiMap.PLUGIN_BASE; }\r\n\r\n    /**\r\n     * Builds data for selected transport\r\n     * @param transport\r\n     * @param key\r\n     * @param parameters\r\n     * @param body\r\n     */\r\n    static build(transport, key, parameters, body) {\r\n        return ApiMap.build(transport, key, parameters, body);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param transport\r\n     * @param key\r\n     * @param response\r\n     * @returns {*}\r\n     */\r\n    static normalizeResponse(transport, key, response) {\r\n        return ApiMap.normalizeResponse(transport, key, response);\r\n    }\r\n\r\n\r\n    /**\r\n     * Creates new API class\r\n     * @param strategy\r\n     */\r\n    constructor({ strategy }) {\r\n        const me = this;\r\n\r\n        me.strategy = strategy;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     * @param parameters\r\n     * @param body\r\n     * @returns {Promise}\r\n     */\r\n    send(key, parameters, body) {\r\n        const me = this;\r\n\r\n        return me.strategy.send(key, parameters, body);\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = API;",
    "const API = require('./API');\r\nconst ApiMap = require(`./transportResolvers/ApiMap`);\r\n\r\n\r\n/**\r\n * Returns information about the current configuration\r\n */\r\nclass ConfigurationAPI extends API {\r\n\r\n    /**\r\n     * Creates ConfigurationAPI\r\n     * @param {number} name\r\n     * @returns {Promise} selected configuration\r\n     */\r\n    get(name) {\r\n        return this.send(ApiMap.getConfiguration, { name: name });\r\n    }\r\n\r\n    /**\r\n     * Updates a configuration\r\n     * @param {Configuration} configuration\r\n     * @returns {Promise} count of configuration\r\n     */\r\n    put(configuration) {\r\n        return this.send(ApiMap.putConfiguration, configuration.toObject(), configuration.toObject());\r\n    }\r\n\r\n    /**\r\n     * Deletes an existing configuration\r\n     * @param {number} name\r\n     * @returns {Promise}\r\n     */\r\n    delete(name) {\r\n        return this.send(ApiMap.deleteConfiguration, { name: name });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = ConfigurationAPI;",
    "const API = require('./API');\r\nconst ApiMap = require(`./transportResolvers/ApiMap`);\r\nconst DeviceCountQuery = require('../models/query/DeviceCountQuery');\r\nconst DeviceListQuery = require('../models/query/DeviceListQuery');\r\n\r\n\r\n/**\r\n * Returns information about the current device\r\n */\r\nclass DeviceAPI extends API {\r\n\r\n    /**\r\n     * Creates DeviceAPI\r\n     * @param {string} deviceId\r\n     * @returns {Promise} selected device\r\n     */\r\n    get(deviceId) {\r\n        return this.send(ApiMap.getDevice, { deviceId: deviceId });\r\n    }\r\n\r\n    /**\r\n     * Return a list of devices\r\n     * @param {DeviceListQuery} deviceListQuery\r\n     * @returns {Promise} list of devices\r\n     */\r\n    list(deviceListQuery = new DeviceListQuery()) {\r\n        return this.send(ApiMap.listDevice, deviceListQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Returns count of devices\r\n     * @param {DeviceCountQuery} deviceCountQuery\r\n     * @returns {Promise} count of devices\r\n     */\r\n    count(deviceCountQuery = new DeviceCountQuery()) {\r\n        return this.send(ApiMap.countDevice, deviceCountQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Registers or updates a device\r\n     * @param {object} device data\r\n     * @returns {Promise} count of devices\r\n     */\r\n    add(device) {\r\n        return this.send(ApiMap.addDevice, { deviceId: device.id }, device.toObject());\r\n    }\r\n\r\n    /**\r\n     * Deletes an existing device\r\n     * @param {string} deviceId\r\n     * @returns {Promise}\r\n     */\r\n    delete(deviceId) {\r\n        return this.send(ApiMap.deleteDevice, { deviceId: deviceId });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceAPI;",
    "const API = require('./API');\r\nconst ApiMap = require(`./transportResolvers/ApiMap`);\r\nconst CommandGetQuery = require('../models/query/CommandGetQuery');\r\nconst CommandListQuery = require('../models/query/CommandListQuery');\r\nconst CommandPollQuery = require('../models/query/CommandPollQuery');\r\nconst CommandPollManyQuery = require('../models/query/CommandPollManyQuery');\r\nconst CommandWaitQuery = require('../models/query/CommandWaitQuery');\r\n\r\n\r\n/**\r\n * Returns information about the current command\r\n */\r\nclass DeviceCommandAPI extends API {\r\n\r\n    /**\r\n     * Creates DeviceCommandAPI\r\n     * @param {number} deviceId - Device ID\r\n     * @param {number} commandId - Command ID\r\n     * @param {CommandGetQuery} commandGetQuery\r\n     * @returns {Promise} selected command\r\n     */\r\n    get(deviceId, commandId, commandGetQuery = new CommandGetQuery()) {\r\n        return this.send(ApiMap.getCommand, Object.assign({ deviceId: deviceId, commandId: commandId }, commandGetQuery.toObject()));\r\n    }\r\n\r\n    /**\r\n     * Return a list of commands\r\n     * @param {CommandListQuery} commandListQuery\r\n     * @returns {Promise} list of commands\r\n     */\r\n    list(commandListQuery = new CommandListQuery()) {\r\n        return this.send(ApiMap.listCommand, commandListQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Registers a command\r\n     * @param {number} deviceId - Device ID\r\n     * @param {Command} command\r\n     * @returns {Promise} count of commands\r\n     */\r\n    insert(deviceId, command) {\r\n        return this.send(ApiMap.insertCommand, { deviceId: deviceId }, command.toObject());\r\n    }\r\n\r\n    /**\r\n     * Updates a command\r\n     * @param {Command} command\r\n     * @returns {Promise} count of commands\r\n     */\r\n    update(command) {\r\n        return this.send(ApiMap.updateCommand, { deviceId: command.deviceId, commandId: command.id }, command.toObject());\r\n    }\r\n\r\n    /**\r\n     * Poll commands\r\n     * @param {CommandPollQuery} commandPollQuery\r\n     * @returns {Promise}\r\n     */\r\n    poll(commandPollQuery = new CommandPollQuery()) {\r\n        return this.send(ApiMap.pollCommand, commandPollQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Poll many commands\r\n     * @param {CommandPollManyQuery} commandPollManyQuery\r\n     * @returns {Promise}\r\n     */\r\n    pollMany(commandPollManyQuery = new CommandPollManyQuery()) {\r\n        return this.send(ApiMap.pollManyCommand, commandPollManyQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Wait for command to be processed\r\n     * @param deviceId\r\n     * @param commandId\r\n     * @param {CommandWaitQuery} commandWaitQuery\r\n     * @returns {Promise}\r\n     */\r\n    wait(deviceId, commandId, commandWaitQuery = new CommandWaitQuery()) {\r\n        return this.send(ApiMap.waitCommand, Object.assign({}, {\r\n            deviceId,\r\n            commandId\r\n        }, commandWaitQuery.toObject()));\r\n    }\r\n\r\n    /**\r\n     * Subscribe for command creation events\r\n     * @param {CommandPollQuery} commandPollQuery\r\n     * @returns {Promise}\r\n     */\r\n    subscribe(commandPollQuery = new CommandPollQuery()) {\r\n        return this.send(ApiMap.subscribeCommand, commandPollQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe for command creation events\r\n     * @param {Number} subscriptionId\r\n     * @returns {Promise}\r\n     */\r\n    unsubscribe(subscriptionId) {\r\n        return this.send(ApiMap.unsubscribeCommand, { subscriptionId: subscriptionId });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceCommandAPI;",
    "const API = require('./API');\r\nconst ApiMap = require(`./transportResolvers/ApiMap`);\r\nconst NotificationListQuery = require('../models/query/NotificationListQuery');\r\nconst NotificationPollQuery = require('../models/query/NotificationPollQuery');\r\nconst NotificationPollManyQuery = require('../models/query/NotificationPollManyQuery');\r\n\r\n\r\n/**\r\n * Returns information about the current notification\r\n */\r\nclass DeviceNotificationAPI extends API {\r\n\r\n    /**\r\n     * Creates DeviceNotificationAPI\r\n     * @param {number} deviceId - Device ID\r\n     * @param {number} notificationId - Notification ID\r\n     * @returns {Promise} selected notification\r\n     */\r\n    get(deviceId, notificationId) {\r\n        return this.send(ApiMap.getNotification, { deviceId: deviceId, notificationId: notificationId });\r\n    }\r\n\r\n    /**\r\n     * Return a list of notifications\r\n     * @param {NotificationListQuery} notificationListQuery\r\n     * @returns {Promise} list of notifications\r\n     */\r\n    list(notificationListQuery = new NotificationListQuery()) {\r\n        return this.send(ApiMap.listNotification, notificationListQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Registers a notification\r\n     * @param {Number} deviceId\r\n     * @param {Notification} notification\r\n     * @returns {Promise} count of notifications\r\n     */\r\n    insert(deviceId, notification) {\r\n        return this.send(ApiMap.insertNotification, { deviceId }, notification.toObject());\r\n    }\r\n\r\n    /**\r\n     * Poll notifications\r\n     * @param {NotificationPollQuery} notificationPollQuery\r\n     * @returns {*}\r\n     */\r\n    poll(notificationPollQuery = new NotificationPollQuery()) {\r\n        return this.send(ApiMap.pollNotification, notificationPollQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Poll many notifications\r\n     * @param {NotificationPollManyQuery} notificationPollManyQuery\r\n     * @returns {*}\r\n     */\r\n    pollMany(notificationPollManyQuery = new NotificationPollManyQuery()) {\r\n        return this.send(ApiMap.pollManyNotification, notificationPollManyQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Subscribe for new notifications\r\n     * @param {NotificationPollQuery} notificationPollQuery\r\n     * @returns {Promise}\r\n     */\r\n    subscribe(notificationPollQuery = new NotificationPollQuery()) {\r\n        return this.send(ApiMap.subscribeNotification, notificationPollQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Unsubscribe from notifications creation\r\n     * @param {Number} subscriptionId\r\n     * @returns {Promise}\r\n     */\r\n    unsubscribe(subscriptionId) {\r\n        return this.send(ApiMap.unsubscribeNotification, { subscriptionId: subscriptionId });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceNotificationAPI;",
    "const API = require('./API');\r\nconst ApiMap = require(`./transportResolvers/ApiMap`);\r\nconst DeviceTypeListQuery = require('../models/query/DeviceTypeListQuery');\r\nconst DeviceTypeCountQuery = require('../models/query/DeviceTypeCountQuery');\r\nconst DeviceTypeDeleteQuery = require('../models/query/DeviceTypeDeleteQuery');\r\n\r\n\r\n/**\r\n * Returns information about the current deviceType\r\n */\r\nclass DeviceTypeAPI extends API {\r\n\r\n    /**\r\n     * Creates DeviceTypeAPI\r\n     * @param {number} deviceTypeId - Device type ID\r\n     * @returns {Promise} selected deviceType\r\n     */\r\n    get(deviceTypeId) {\r\n        return this.send(ApiMap.getDeviceType, { deviceTypeId: deviceTypeId });\r\n    }\r\n\r\n    /**\r\n     * Return a list of deviceTypes\r\n     * @param {DeviceTypeListQuery} deviceTypeListQuery\r\n     * @returns {Promise} list of deviceTypes\r\n     */\r\n    list(deviceTypeListQuery = new DeviceTypeListQuery()) {\r\n        return this.send(ApiMap.listDeviceType, deviceTypeListQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Returns count of deviceTypes\r\n     * @param {DeviceTypeCountQuery} deviceTypeCountQuery\r\n     * @returns {Promise} count of deviceTypes\r\n     */\r\n    count(deviceTypeCountQuery = new DeviceTypeCountQuery()) {\r\n        return this.send(ApiMap.countDeviceType, deviceTypeCountQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Registers a deviceType\r\n     * @param {DeviceType} deviceType data\r\n     * @returns {Promise} count of deviceTypes\r\n     */\r\n    insert(deviceType) {\r\n        return this.send(ApiMap.addDeviceType, {}, deviceType.toObject());\r\n    }\r\n\r\n    /**\r\n     * Updates a deviceType\r\n     * @param {DeviceType} deviceType data\r\n     * @returns {Promise} count of deviceTypes\r\n     */\r\n    update(deviceType) {\r\n        return this.send(ApiMap.updateDeviceType, { deviceTypeId: deviceType.id }, deviceType.toObject());\r\n    }\r\n\r\n    /**\r\n     * Deletes an existing deviceType\r\n     * @param {DeviceTypeDeleteQuery} deviceTypeDeleteQuery\r\n     * @returns {Promise}\r\n     */\r\n    delete(deviceTypeDeleteQuery = new DeviceTypeDeleteQuery()) {\r\n        return this.send(ApiMap.deleteDeviceType, deviceTypeDeleteQuery.toObject());\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceTypeAPI;",
    "const API = require('./API');\r\nconst ApiMap = require(`./transportResolvers/ApiMap`);\r\nconst NetworkListQuery = require('../models/query/NetworkListQuery');\r\nconst NetworkCountQuery = require('../models/query/NetworkCountQuery');\r\nconst NetworkDeleteQuery = require('../models/query/NetworkDeleteQuery');\r\n\r\n\r\n/**\r\n * Returns information about the current network\r\n */\r\nclass NetworkAPI extends API {\r\n\r\n    /**\r\n     * Returns a network\r\n     * @param {number} networkId Network id\r\n     * @returns {Promise} selected network\r\n     */\r\n    get(networkId) {\r\n        return this.send(ApiMap.getNetwork, { networkId: networkId });\r\n    }\r\n\r\n    /**\r\n     * Return a list of networks\r\n     * @param {NetworkListQuery} networkListQuery\r\n     * @returns {Promise} list of networks\r\n     */\r\n    list(networkListQuery = new NetworkListQuery()) {\r\n        return this.send(ApiMap.listNetwork, networkListQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Returns count of networks\r\n     * @param {NetworkCountQuery} networkCountQuery\r\n     * @returns {Promise} count of networks\r\n     */\r\n    count(networkCountQuery = new NetworkCountQuery()) {\r\n        return this.send(ApiMap.countNetwork, networkCountQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Registers a network\r\n     * @param {Network} network data\r\n     * @returns {Promise} Network\r\n     */\r\n    insert(network) {\r\n        return this.send(ApiMap.addNetwork, {}, network.toObject());\r\n    }\r\n\r\n    /**\r\n     * Updates a network\r\n     * @param {Network} network data\r\n     * @returns {Promise} Network\r\n     */\r\n    update(network) {\r\n        return this.send(ApiMap.updateNetwork, { networkId: network.id }, network.toObject());\r\n    }\r\n\r\n    /**\r\n     * Deletes an existing network\r\n     * @param {NetworkDeleteQuery} networkDeleteQuery\r\n     * @returns {Promise} Network\r\n     */\r\n    delete(networkDeleteQuery = new NetworkDeleteQuery()) {\r\n        return this.send(ApiMap.deleteNetwork, networkDeleteQuery.toObject());\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = NetworkAPI;",
    "const API = require('./API');\r\nconst ApiMap = require(`./transportResolvers/ApiMap`);\r\nconst PluginCountQuery = require('../models/query/PluginCountQuery');\r\nconst PluginListQuery = require('../models/query/PluginListQuery');\r\nconst PluginRegisterQuery = require('../models/query/PluginRegisterQuery');\r\nconst PluginUpdateQuery = require('../models/query/PluginUpdateQuery');\r\n\r\n\r\n/**\r\n * Returns information about the current plugin\r\n */\r\nclass PluginAPI extends API {\r\n\r\n    /**\r\n     * Return a list of plugins\r\n     * @param {PluginListQuery} pluginListQuery\r\n     * @returns {Promise} list of plugins\r\n     */\r\n    list(pluginListQuery = new PluginListQuery()) {\r\n        return this.send(ApiMap.listPlugin, pluginListQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Returns count of plugins\r\n     * @param {PluginCountQuery} pluginCountQuery\r\n     * @returns {Promise} count of plugins\r\n     */\r\n    count(pluginCountQuery = new PluginCountQuery()) {\r\n        return this.send(ApiMap.countPlugin, pluginCountQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Registers a plugin\r\n     * @param {Plugin} plugin\r\n     * @param {PluginRegisterQuery} pluginRegisterQuery\r\n     * @returns {Promise} Plugin\r\n     */\r\n    register(plugin, pluginRegisterQuery = new PluginRegisterQuery()) {\r\n        return this.send(ApiMap.registerPlugin, pluginRegisterQuery.toObject(), {\r\n            name: plugin.name,\r\n            description: plugin.description,\r\n            parameters: plugin.parameters\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Updates a plugin\r\n     * @param {PluginUpdateQuery} pluginUpdateQuery\r\n     * @returns {Promise} Plugin\r\n     */\r\n    update(pluginUpdateQuery = new PluginUpdateQuery()) {\r\n        return this.send(ApiMap.updatePlugin, pluginUpdateQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Deletes an existing plugin\r\n     * @param {string} topicName\r\n     * @returns {Promise} Plugin\r\n     */\r\n    delete(topicName) {\r\n        return this.send(ApiMap.deletePlugin, { topicName });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = PluginAPI;",
    "const API = require('./API');\r\nconst ApiMap = require(`./transportResolvers/ApiMap`);\r\n\r\n\r\n/**\r\n * Get server info\r\n */\r\nclass InfoAPI extends API {\r\n\r\n    /**\r\n     * Get server info\r\n     * @returns {Promise}\r\n     */\r\n    getServerInfo() {\r\n        return this.send(ApiMap.getServerInfo);\r\n    }\r\n\r\n    /**\r\n     * Get cache info\r\n     * @returns {Promise}\r\n     */\r\n    getCacheInfo() {\r\n        return this.send(ApiMap.getCacheInfo);\r\n    }\r\n\r\n    /**\r\n     * Get cluster info\r\n     * @returns {Promise}\r\n     */\r\n    getClusterInfo() {\r\n        return this.send(ApiMap.getClusterInfo);\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = InfoAPI;",
    "const API = require('./API');\r\nconst ApiMap = require(`./transportResolvers/ApiMap`);\r\n\r\n\r\n/**\r\n * Authenticate using login and password\r\n */\r\nclass TokenAPI extends API {\r\n\r\n    /**\r\n     * Creates TokenAPI\r\n     * @param {string} login\r\n     * @param {string} password\r\n     */\r\n    login(login, password) {\r\n        return this.send(ApiMap.login, {}, { login, password });\r\n    }\r\n\r\n    \r\n    /**\r\n     * Create user token\r\n     * @param {string} token Plugin token\r\n     */\r\n    authPlugin(token) {\r\n        return this.send(ApiMap.authenticatePlugin, { token });\r\n    }\r\n\r\n    /**\r\n     * Create user token\r\n     * @param {UserToken} userToken\r\n     */\r\n    createUserToken(userToken) {\r\n        return this.send(ApiMap.createUserToken, {}, userToken.toObject());\r\n    }\r\n\r\n    /**\r\n     * Create plugin token\r\n     * @param {PluginToken} pluginToken\r\n     */\r\n    createPluginToken(pluginToken) {\r\n        return this.send(ApiMap.createPluginToken, {}, pluginToken.toObject());\r\n    }\r\n\r\n    /**\r\n     * Refresh token\r\n     * @param {string} refreshToken\r\n     */\r\n    refresh(refreshToken) {\r\n        return this.send(ApiMap.refreshToken, {}, { refreshToken: refreshToken });\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = TokenAPI;",
    "const API = require('./API');\r\nconst ApiMap = require(`./transportResolvers/ApiMap`);\r\nconst UserListQuery = require('../models/query/UserListQuery');\r\nconst UserCountQuery = require('../models/query/UserCountQuery');\r\n\r\n\r\n/**\r\n * Return a list of users\r\n */\r\nclass UserAPI extends API {\r\n\r\n    /**\r\n     * Creates UserAPI\r\n     * @param {UserListQuery} userListQuery\r\n     * @returns {Promise} list of users\r\n     */\r\n    list(userListQuery = new UserListQuery()) {\r\n        return this.send(ApiMap.listUser, userListQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Returns count of users\r\n     * @param {UserCountQuery} userCountQuery\r\n     * @returns {Promise} count of users\r\n     */\r\n    count(userCountQuery = new UserCountQuery()) {\r\n        return this.send(ApiMap.countUser, userCountQuery.toObject());\r\n    }\r\n\r\n    /**\r\n     * Returns information about the current user\r\n     * @param {number} userId\r\n     * @returns {Promise} selected user\r\n     */\r\n    get(userId) {\r\n        return this.send(ApiMap.getUser, { userId: userId });\r\n    }\r\n\r\n    /**\r\n     * Registers a user\r\n     * @param {User} user data\r\n     * @returns {Promise} count of users\r\n     */\r\n    insert(user) {\r\n        return this.send(ApiMap.addUser, {}, user.toObject());\r\n    }\r\n\r\n    /**\r\n     * Updates a user (only for administrators)\r\n     * @param {User} user data\r\n     * @returns {Promise} count of users\r\n     */\r\n    update(user) {\r\n        return this.send(ApiMap.updateUser, { userId: user.id }, user.toObject());\r\n    }\r\n\r\n    /**\r\n     * Deletes an existing user\r\n     * @param {number} userId\r\n     * @returns {Promise}\r\n     */\r\n    delete(userId) {\r\n        return this.send(ApiMap.deleteUser, { userId: userId });\r\n    }\r\n\r\n    /**\r\n     * Returns information about the current user\r\n     * @returns {Promise} selected user\r\n     */\r\n    getCurrent() {\r\n        return this.send(ApiMap.getCurrentUser);\r\n    }\r\n\r\n    /**\r\n     * Updates a user (only for administrators)\r\n     * @param {User} user data\r\n     * @returns {Promise} count of users\r\n     */\r\n    updateCurrent(user) {\r\n        return this.send(ApiMap.updateCurrentUser, {}, user.toObject());\r\n    }\r\n\r\n    /**\r\n     * Returns user's device types\r\n     * @param userId\r\n     * @returns {Promise}\r\n     */\r\n    getDeviceTypes(userId) {\r\n        return this.send(ApiMap.getUserDeviceTypes, { userId: userId });\r\n    }\r\n\r\n    /**\r\n     * Unassigns all user's device types\r\n     * @param userId\r\n     * @returns {Promise}\r\n     */\r\n    unassignAllDeviceTypes(userId) {\r\n        return this.send(ApiMap.unassignAllDeviceTypes, { userId: userId });\r\n    }\r\n\r\n    /**\r\n     * Assigns all device types to user\r\n     * @param userId\r\n     * @returns {Promise}\r\n     */\r\n    assignAllDeviceTypes(userId) {\r\n        return this.send(ApiMap.assignAllDeviceTypes, { userId: userId });\r\n    }\r\n\r\n    /**\r\n     * Unassigns mentioned device type\r\n     * @param userId\r\n     * @param deviceTypeId\r\n     * @returns {Promise}\r\n     */\r\n    unassignDeviceType(userId, deviceTypeId) {\r\n        return this.send(ApiMap.unassignDeviceType, { userId: userId, deviceTypeId: deviceTypeId });\r\n    }\r\n\r\n    /**\r\n     * Returns user's device type by id\r\n     * @param userId\r\n     * @param deviceTypeId\r\n     * @returns {Promise}\r\n     */\r\n    getDeviceType(userId, deviceTypeId) {\r\n        return this.send(ApiMap.getUserDeviceType, { userId: userId, deviceTypeId: deviceTypeId });\r\n    }\r\n\r\n    /**\r\n     * Assigns mentioned device type to user\r\n     * @param userId\r\n     * @param deviceTypeId\r\n     * @returns {Promise}\r\n     */\r\n    assignDeviceType(userId, deviceTypeId) {\r\n        return this.send(ApiMap.assignDeviceType, { userId: userId, deviceTypeId: deviceTypeId });\r\n    }\r\n\r\n    /**\r\n     * Gets information about user/network association\r\n     * @param {number} userId - User ID\r\n     * @param {number} networkId - Network ID\r\n     * @returns {Promise}\r\n     */\r\n    getNetwork(userId, networkId) {\r\n        return this.send(ApiMap.getUserNetwork, { userId: userId, networkId: networkId });\r\n    }\r\n\r\n    /**\r\n     * Associates network with the user\r\n     * @param {number} userId - User ID\r\n     * @param {number} networkId - Network ID\r\n     * @returns {Promise}\r\n     */\r\n    assignNetwork(userId, networkId) {\r\n        return this.send(ApiMap.assignNetwork, { userId: userId, networkId: networkId });\r\n    }\r\n\r\n    /**\r\n     * Removes association between network and user\r\n     * @param {number} userId - User ID\r\n     * @param {number} networkId - Network ID\r\n     * @returns {Promise}\r\n     */\r\n    unassignNetwork(userId, networkId) {\r\n        return this.send(ApiMap.unassignNetwork, { userId: userId, networkId: networkId });\r\n    }\r\n\r\n}\r\n\r\n\r\nmodule.exports = UserAPI;",
    "const HttpApiResolver = require(`./HttpApiResolver`);\r\nconst WebSocketApiResolver = require(`./WebSocketApiResolver`);\r\n\r\nconst NoApiError = require('../../error/NoApiError');\r\nconst UnsupportedApiTransportError = require('../../error/UnsupportedApiTransportError');\r\n\r\nconst apiMap = new Map();\r\n\r\n\r\n/**\r\n * Api Map\r\n */\r\nclass ApiMap {\r\n\r\n    static get login() { return 'login'; }\r\n    static get createUserToken() { return 'createUserToken'; }\r\n    static get createPluginToken() { return 'createPluginToken'; }\r\n    static get refreshToken() { return 'refreshToken'; }\r\n    static get authenticatePlugin() { return 'authenticatePlugin'; }\r\n\r\n    static get getServerInfo() { return 'getServerInfo'; }\r\n    static get getCacheInfo() { return 'getCacheInfo'; }\r\n    static get getClusterInfo() { return 'getClusterInfo'; }\r\n\r\n    static get getConfiguration() { return 'getConfiguration'; }\r\n    static get putConfiguration() { return 'putConfiguration'; }\r\n    static get deleteConfiguration() { return 'deleteConfiguration'; }\r\n\r\n    static get listDevice() { return 'listDevice'; }\r\n    static get countDevice() { return 'countDevice'; }\r\n    static get getDevice() { return 'getDevice'; }\r\n    static get addDevice() { return 'addDevice'; }\r\n    static get deleteDevice() { return 'deleteDevice'; }\r\n\r\n    static get listDeviceType() { return 'listDeviceType'; }\r\n    static get countDeviceType() { return 'countDeviceType'; }\r\n    static get getDeviceType() { return 'getDeviceType'; }\r\n    static get addDeviceType() { return 'addDeviceType'; }\r\n    static get updateDeviceType() { return 'updateDeviceType'; }\r\n    static get deleteDeviceType() { return 'deleteDeviceType'; }\r\n\r\n    static get getCommand() { return 'getCommand'; }\r\n    static get listCommand() { return 'listCommand'; }\r\n    static get insertCommand() { return 'insertCommand'; }\r\n    static get subscribeCommand() { return 'subscribeCommand'; }\r\n    static get pollCommand() { return 'pollCommand'; }\r\n    static get pollManyCommand() { return 'pollManyCommand'; }\r\n    static get waitCommand() { return 'waitCommand'; }\r\n    static get unsubscribeCommand() { return 'unsubscribeCommand'; }\r\n    static get updateCommand() { return 'updateCommand'; }\r\n\r\n    static get getNotification() { return 'getNotification'; }\r\n    static get listNotification() { return 'listNotification'; }\r\n    static get insertNotification() { return 'insertNotification'; }\r\n    static get subscribeNotification() { return 'subscribeNotification'; }\r\n    static get unsubscribeNotification() { return 'unsubscribeNotification'; }\r\n    static get pollNotification() { return 'pollNotification'; }\r\n    static get pollManyNotification() { return 'pollManyNotification'; }\r\n\r\n    static get listNetwork() { return 'listNetwork'; }\r\n    static get countNetwork() { return 'countNetwork'; }\r\n    static get getNetwork() { return 'getNetwork'; }\r\n    static get addNetwork() { return 'addNetwork'; }\r\n    static get updateNetwork() { return 'updateNetwork'; }\r\n    static get deleteNetwork() { return 'deleteNetwork'; }\r\n\r\n    static get listUser() { return 'listUser'; }\r\n    static get countUser() { return 'countUser'; }\r\n    static get getUser() { return 'getUser'; }\r\n    static get addUser() { return 'addUser'; }\r\n    static get updateUser() { return 'updateUser'; }\r\n    static get deleteUser() { return 'deleteUser'; }\r\n    static get getCurrentUser() { return 'getCurrentUser'; }\r\n    static get updateCurrentUser() { return 'updateCurrentUser'; }\r\n    static get getUserDeviceTypes() { return 'getUserDeviceTypes'; }\r\n    static get assignAllDeviceTypes() { return 'assignAllDeviceTypes'; }\r\n    static get unassignAllDeviceTypes() { return 'unassignAllDeviceTypes'; }\r\n    static get getUserDeviceType() { return 'getUserDeviceType'; }\r\n    static get assignDeviceType() { return 'assignDeviceType'; }\r\n    static get unassignDeviceType() { return 'unassignDeviceType'; }\r\n    static get getUserNetwork() { return 'getUserNetwork'; }\r\n    static get assignNetwork() { return 'assignNetwork'; }\r\n    static get unassignNetwork() { return 'unassignNetwork'; }\r\n\r\n    static get listPlugin() { return 'listPlugin'; }\r\n    static get countPlugin() { return 'countPlugin'; }\r\n    static get registerPlugin() { return 'registerPlugin'; }\r\n    static get deletePlugin() { return 'deletePlugin'; }\r\n    static get updatePlugin() { return 'updatePlugin'; }\r\n\r\n    static get HTTP_API() { return `http`; }\r\n    static get WS_API() { return `ws`; }\r\n\r\n    static get MAIN_BASE() { return `main`; }\r\n    static get AUTH_BASE() { return `auth`; }\r\n    static get PLUGIN_BASE() { return `plugin`; }\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     */\r\n    static isSubscription(key) {\r\n        return key === ApiMap.subscribeNotification || key === ApiMap.subscribeCommand;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param key\r\n     */\r\n    static isUnsubscription(key) {\r\n        return key === ApiMap.unsubscribeNotification || key === ApiMap.unsubscribeCommand;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param transport\r\n     * @param key\r\n     * @param parameters\r\n     * @param body\r\n     * @returns {Object}\r\n     */\r\n    static build(transport, key, parameters, body) {\r\n        let transportAPI;\r\n\r\n        const apiObject = apiMap.get(key);\r\n\r\n        if (!apiObject) {\r\n            throw new NoApiError();\r\n        }\r\n\r\n        const transportApiObject = apiObject[transport];\r\n\r\n        if (!transportApiObject) {\r\n            throw new UnsupportedApiTransportError({ key, transport });\r\n        }\r\n\r\n        switch (transport) {\r\n            case ApiMap.HTTP_API:\r\n                transportAPI = new HttpApiResolver(transportApiObject);\r\n                break;\r\n            case ApiMap.WS_API:\r\n                transportAPI = new WebSocketApiResolver(transportApiObject);\r\n                break;\r\n        }\r\n\r\n        return transportAPI.build(parameters, body);\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @param transport\r\n     * @param key\r\n     * @param response\r\n     * @returns {*}\r\n     */\r\n    static normalizeResponse(transport, key, response) {\r\n        let normalizedResponse = {};\r\n\r\n        switch (transport) {\r\n            case ApiMap.HTTP_API:\r\n                normalizedResponse = HttpApiResolver.normalizeResponse(response);\r\n                break;\r\n            case ApiMap.WS_API:\r\n                normalizedResponse = WebSocketApiResolver.normalizeResponse(response,\r\n                    apiMap.get(key)[transport].response);\r\n                break;\r\n        }\r\n\r\n        return normalizedResponse;\r\n    }\r\n}\r\n\r\n\r\napiMap.set(ApiMap.login, { http: { method: 'POST', uri: '/token', base: ApiMap.AUTH_BASE, noAuth: true }, ws: { action: 'token', response: [`accessToken`, `refreshToken`] } });\r\napiMap.set(ApiMap.createUserToken, { http: { method: 'POST', uri: '/token/create', base: ApiMap.AUTH_BASE }, ws: { action: 'token/create', bodyKey: 'payload', response: [`accessToken`, `refreshToken`] } });\r\napiMap.set(ApiMap.createPluginToken, { http: { method: 'POST', uri: '/token/plugin/create', base: ApiMap.AUTH_BASE } });\r\napiMap.set(ApiMap.refreshToken, { http: { method: 'POST', uri: '/token/refresh', base: ApiMap.AUTH_BASE, noAuth: true }, ws: { action: 'token/refresh', response: [`accessToken`] } });\r\napiMap.set(ApiMap.authenticatePlugin, { http: { method: 'GET', uri: '/token/plugin/authenticate', base: ApiMap.AUTH_BASE } });\r\n\r\napiMap.set(ApiMap.getServerInfo, { http: { method: 'GET', uri: '/info', base: ApiMap.MAIN_BASE, noAuth: true }, ws: { action: 'server/info', response: { bodyKey: `info` } } });\r\napiMap.set(ApiMap.getCacheInfo, { http: { method: 'GET', uri: '/info/cache', base: ApiMap.MAIN_BASE, noAuth: true } });\r\napiMap.set(ApiMap.getClusterInfo, { http: { method: 'GET', uri: '/info/config/cluster', base: ApiMap.MAIN_BASE, noAuth: true }, ws: { action: 'cluster/info', response: { bodyKey: `clusterInfo` } } });\r\n\r\napiMap.set(ApiMap.getConfiguration, { http: { method: 'GET', uri: '/configuration/{name}', base: ApiMap.MAIN_BASE }, ws: { action: 'configuration/get', response: { bodyKey: `configuration` } } });\r\napiMap.set(ApiMap.putConfiguration, { http: { method: 'PUT', uri: '/configuration/{name}', base: ApiMap.MAIN_BASE }, ws: { action: 'configuration/put', response: { bodyKey: `configuration` } } });\r\napiMap.set(ApiMap.deleteConfiguration, { http: { method: 'DELETE', uri: '/configuration/{name}', base: ApiMap.MAIN_BASE }, ws: { action: 'configuration/delete', response: null } });\r\n\r\napiMap.set(ApiMap.listDevice, { http: { method: 'GET', uri: '/device', base: ApiMap.MAIN_BASE }, ws: { action: 'device/list', response: { bodyKey: `devices` } } });\r\napiMap.set(ApiMap.countDevice, { http: { method: 'GET', uri: '/device/count', base: ApiMap.MAIN_BASE }, ws: { action: 'device/count', response: [`count`] } });\r\napiMap.set(ApiMap.getDevice, { http: { method: 'GET', uri: '/device/{deviceId}', base: ApiMap.MAIN_BASE }, ws: { action: 'device/get', response: { bodyKey: `device` } } });\r\napiMap.set(ApiMap.addDevice, { http: { method: 'PUT', uri: '/device/{deviceId}', base: ApiMap.MAIN_BASE }, ws: { action: 'device/save', bodyKey: 'device', response: null } });\r\napiMap.set(ApiMap.deleteDevice, { http: { method: 'DELETE', uri: '/device/{deviceId}', base: ApiMap.MAIN_BASE }, ws: { action: 'device/delete', response: null } });\r\n\r\napiMap.set(ApiMap.listDeviceType, { http: { method: 'GET', uri: '/devicetype', base: ApiMap.MAIN_BASE }, ws: { action: 'devicetype/list', response: { bodyKey: 'deviceTypes' } } });\r\napiMap.set(ApiMap.countDeviceType, { http: { method: 'GET', uri: '/devicetype/count', base: ApiMap.MAIN_BASE }, ws: { action: 'devicetype/count', response: [`count`] } });\r\napiMap.set(ApiMap.getDeviceType, { http: { method: 'GET', uri: '/devicetype/{deviceTypeId}', base: ApiMap.MAIN_BASE }, ws: { action: 'devicetype/get', response: { bodyKey: 'deviceType' } } });\r\napiMap.set(ApiMap.addDeviceType, { http: { method: 'POST', uri: '/devicetype', base: ApiMap.MAIN_BASE }, ws: { action: 'devicetype/insert', bodyKey: 'deviceType', response: { bodyKey: 'deviceType' } } });\r\napiMap.set(ApiMap.updateDeviceType, { http: { method: 'PUT', uri: '/devicetype/{deviceTypeId}', base: ApiMap.MAIN_BASE }, ws: { action: 'devicetype/update', bodyKey: 'deviceType', response: null } });\r\napiMap.set(ApiMap.deleteDeviceType, { http: { method: 'DELETE', uri: '/devicetype/{deviceTypeId}', base: ApiMap.MAIN_BASE }, ws: { action: 'devicetype/delete', response: null } });\r\n\r\napiMap.set(ApiMap.listCommand, { http: { method: 'GET', uri: '/device/{deviceId}/command', base: ApiMap.MAIN_BASE }, ws: { action: 'command/list', response: { bodyKey: 'commands' } } });\r\napiMap.set(ApiMap.getCommand, { http: { method: 'GET', uri: '/device/{deviceId}/command/{commandId}', base: ApiMap.MAIN_BASE }, ws: { action: 'command/get', response: { bodyKey: 'command' } } });\r\napiMap.set(ApiMap.insertCommand, { http: { method: 'POST', uri: '/device/{deviceId}/command', base: ApiMap.MAIN_BASE }, ws: { action: 'command/insert', bodyKey: 'command', response: { bodyKey: 'command' } } });\r\napiMap.set(ApiMap.updateCommand, { http: { method: 'PUT', uri: '/device/{deviceId}/command/{commandId}', base: ApiMap.MAIN_BASE }, ws: { action: 'command/update', bodyKey: 'command', response: null } });\r\napiMap.set(ApiMap.pollCommand, { http: { method: 'GET', uri: '/device/{deviceId}/command/poll', base: ApiMap.MAIN_BASE } });\r\napiMap.set(ApiMap.pollManyCommand, { http: { method: 'GET', uri: '/device/command/poll', base: ApiMap.MAIN_BASE } });\r\napiMap.set(ApiMap.waitCommand, { http: { method: 'GET', uri: '/device/{deviceId}/command/{commandId}/poll', base: ApiMap.MAIN_BASE } });\r\napiMap.set(ApiMap.subscribeCommand, { http: { method: 'GET', uri: '/device/command/poll', base: ApiMap.MAIN_BASE, subscription: true }, ws: { action: 'command/subscribe', response: [`subscriptionId`] } });\r\napiMap.set(ApiMap.unsubscribeCommand, { http: { unsubscription: true }, ws: { action: 'command/unsubscribe', response: null } });\r\n\r\napiMap.set(ApiMap.listNotification, { http: { method: 'GET', uri: '/device/{deviceId}/notification', base: ApiMap.MAIN_BASE }, ws: { action: 'notification/list', response: { bodyKey: 'notifications' } } });\r\napiMap.set(ApiMap.getNotification, { http: { method: 'GET', uri: '/device/{deviceId}/notification/{notificationId}', base: ApiMap.MAIN_BASE }, ws: { action: 'notification/get', response: { bodyKey: 'notification' } } });\r\napiMap.set(ApiMap.insertNotification, { http: { method: 'POST', uri: '/device/{deviceId}/notification', base: ApiMap.MAIN_BASE }, ws: { action: 'notification/insert', bodyKey: 'notification', response: { bodyKey: 'notification' } } });\r\napiMap.set(ApiMap.pollNotification, { http: { method: 'GET', uri: '/device/{deviceId}/notification/poll', base: ApiMap.MAIN_BASE } });\r\napiMap.set(ApiMap.pollManyNotification, { http: { method: 'GET', uri: '/device/notification/poll', base: ApiMap.MAIN_BASE } });\r\napiMap.set(ApiMap.subscribeNotification, { http: { method: 'GET', uri: '/device/notification/poll', base: ApiMap.MAIN_BASE, subscription: true }, ws: { action: 'notification/subscribe', response: [`subscriptionId`] } });\r\napiMap.set(ApiMap.unsubscribeNotification, { http: { unsubscription: true }, ws: { action: 'notification/unsubscribe', response: null } });\r\n\r\napiMap.set(ApiMap.listNetwork, { http: { method: 'GET', uri: '/network', base: ApiMap.MAIN_BASE }, ws: { action: 'network/list', response: { bodyKey: 'networks' } } });\r\napiMap.set(ApiMap.countNetwork, { http: { method: 'GET', uri: '/network/count', base: ApiMap.MAIN_BASE }, ws: { action: 'network/count', response: [`count`] } });\r\napiMap.set(ApiMap.getNetwork, { http: { method: 'GET', uri: '/network/{networkId}', base: ApiMap.MAIN_BASE }, ws: { action: 'network/get', response: { bodyKey: 'network' } } });\r\napiMap.set(ApiMap.addNetwork, { http: { method: 'POST', uri: '/network', base: ApiMap.MAIN_BASE }, ws: { action: 'network/insert', bodyKey: 'network', response: { bodyKey: 'network' } } });\r\napiMap.set(ApiMap.updateNetwork, { http: { method: 'PUT', uri: '/network/{networkId}', base: ApiMap.MAIN_BASE }, ws: { action: 'network/update', bodyKey: 'network', response: null } });\r\napiMap.set(ApiMap.deleteNetwork, { http: { method: 'DELETE', uri: '/network/{networkId}', base: ApiMap.MAIN_BASE }, ws: { action: 'network/delete', response: null } });\r\n\r\napiMap.set(ApiMap.listUser, { http: { method: 'GET', uri: '/user', base: ApiMap.MAIN_BASE }, ws: { action: 'user/list', response: { bodyKey: 'users' } } });\r\napiMap.set(ApiMap.countUser, { http: { method: 'GET', uri: '/user/count', base: ApiMap.MAIN_BASE }, ws: { action: 'user/count', response: [`count`] } });\r\napiMap.set(ApiMap.getUser, { http: { method: 'GET', uri: '/user/{userId}', base: ApiMap.MAIN_BASE }, ws: { action: 'user/get', response: { bodyKey: 'user' } } });\r\napiMap.set(ApiMap.addUser, { http: { method: 'POST', uri: '/user', base: ApiMap.MAIN_BASE }, ws: { action: 'user/insert', bodyKey: 'user', response: { bodyKey: 'user' } } });\r\napiMap.set(ApiMap.updateUser, { http: { method: 'PUT', uri: '/user/{userId}', base: ApiMap.MAIN_BASE }, ws: { action: 'user/update', bodyKey: 'user', response: null } });\r\napiMap.set(ApiMap.deleteUser, { http: { method: 'DELETE', uri: '/user/{userId}', base: ApiMap.MAIN_BASE }, ws: { action: 'user/delete', response: null } });\r\napiMap.set(ApiMap.getCurrentUser, { http: { method: 'GET', uri: '/user/current', base: ApiMap.MAIN_BASE }, ws: { action: 'user/getCurrent', response: { bodyKey: 'current' } } });\r\napiMap.set(ApiMap.updateCurrentUser, { http: { method: 'PUT', uri: '/user/current', base: ApiMap.MAIN_BASE }, ws: { action: 'user/updateCurrent', bodyKey: 'user', response: null } });\r\napiMap.set(ApiMap.getUserDeviceTypes, { http: { method: 'GET', uri: '/user/{userId}/devicetype', base: ApiMap.MAIN_BASE } });\r\napiMap.set(ApiMap.unassignAllDeviceTypes, { http: { method: 'DELETE', uri: '/user/{userId}/devicetype/all', base: ApiMap.MAIN_BASE } });\r\napiMap.set(ApiMap.assignAllDeviceTypes, { http: { method: 'PUT', uri: '/user/{userId}/devicetype/all', base: ApiMap.MAIN_BASE } });\r\napiMap.set(ApiMap.unassignDeviceType, { http: { method: 'DELETE', uri: '/user/{userId}/devicetype/{deviceTypeId}', base: ApiMap.MAIN_BASE } });\r\napiMap.set(ApiMap.getUserDeviceType, { http: { method: 'GET', uri: '/user/{userId}/devicetype/{deviceTypeId}', base: ApiMap.MAIN_BASE } });\r\napiMap.set(ApiMap.assignDeviceType, { http: { method: 'PUT', uri: '/user/{userId}/devicetype/{deviceTypeId}', base: ApiMap.MAIN_BASE } });\r\napiMap.set(ApiMap.getUserNetwork, { http: { method: 'GET', uri: '/user/{userId}/network/{networkId}', base: ApiMap.MAIN_BASE }, ws: { action: 'user/getNetwork', response: { bodyKey: 'network' } } });\r\napiMap.set(ApiMap.assignNetwork, { http: { method: 'PUT', uri: '/user/{userId}/network/{networkId}', base: ApiMap.MAIN_BASE }, ws: { action: 'user/assignNetwork', response: null } });\r\napiMap.set(ApiMap.unassignNetwork, { http: { method: 'DELETE', uri: '/user/{userId}/network/{networkId}', base: ApiMap.MAIN_BASE }, ws: { action: 'user/unassignNetwork', response: null } });\r\n\r\napiMap.set(ApiMap.listPlugin, { http: { method: 'GET', uri: '/plugin', base: ApiMap.PLUGIN_BASE } });\r\napiMap.set(ApiMap.countPlugin, { http: { method: 'GET', uri: '/plugin/count', base: ApiMap.PLUGIN_BASE } });\r\napiMap.set(ApiMap.registerPlugin, { http: { method: 'POST', uri: '/plugin', base: ApiMap.PLUGIN_BASE } });\r\napiMap.set(ApiMap.deletePlugin, { http: { method: 'DELETE', uri: '/plugin', base: ApiMap.PLUGIN_BASE } });\r\napiMap.set(ApiMap.updatePlugin, { http: { method: 'PUT', uri: '/plugin', base: ApiMap.PLUGIN_BASE } });\r\n\r\n\r\nmodule.exports = ApiMap;",
    "const format = require(\"string-template\");\r\nconst queryString = require('query-string');\r\n\r\n\r\n/**\r\n * HttpApiResolver\r\n */\r\nclass HttpApiResolver {\r\n\r\n    /**\r\n     * Builds URL\r\n     * @param {string} base - base URI\r\n     * @param {object} parameters - URI parameters\r\n     * @returns {string}\r\n     */\r\n    static buildUrl(base, parameters = {}) {\r\n        const pathRegex = /[^{}]+(?=\\})/g;\r\n        const pathParameterKeys = pathRegex.test(base) ? base.match(pathRegex) : [];\r\n        const pathParameters = {};\r\n        const queryParameters = {};\r\n        Object.keys(parameters).forEach(key => {\r\n            if (pathParameterKeys.includes(key)) {\r\n                pathParameters[key] = parameters[key];\r\n            } else {\r\n                queryParameters[key] = parameters[key];\r\n            }\r\n        });\r\n\r\n        const stringParameters = queryString.stringify(queryParameters);\r\n        const url = format(base, pathParameters);\r\n\r\n        return stringParameters ? `${url}?${stringParameters}` : url;\r\n    }\r\n\r\n    /**\r\n     * Normalaizes response\r\n     * @param {object} response\r\n     * @returns {{*}} - Normalized response\r\n     */\r\n    static normalizeResponse(response) {\r\n        if (response.error) {\r\n            throw response.message;\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    /**\r\n     * @param {object} options\r\n     * @param {string} options.method\r\n     * @param {string} options.uri\r\n     * @param {string} options.base\r\n     * @param {boolean} options.subscription\r\n     * @param {boolean} options.unsubscription\r\n     */\r\n    constructor({ method, uri, base, subscription, unsubscription, noAuth }) {\r\n        const me = this;\r\n\r\n        me.method = method;\r\n        me.uri = uri;\r\n        me.base = base;\r\n        me.subscription = subscription;\r\n        me.unsubscription = unsubscription;\r\n        me.noAuth = noAuth;\r\n    }\r\n\r\n    /**\r\n     * Builds request\r\n     * @param {object} parameters\r\n     * @param {object} body\r\n     * @returns {{method: *, endpoint: string}}\r\n     */\r\n    build(parameters, body) {\r\n        const me = this;\r\n        let result;\r\n        \r\n        if (me.unsubscription === true) {\r\n            result = {\r\n                noAuth: me.noAuth,\r\n                unsubscription: me.unsubscription,\r\n                body: {\r\n                    subscriptionId: parameters.subscriptionId\r\n                }\r\n            };\r\n        } else {\r\n            result = {\r\n                noAuth: me.noAuth,\r\n                method: me.method,\r\n                endpoint: HttpApiResolver.buildUrl(me.uri, parameters),\r\n                base: me.base,\r\n                subscription: me.subscription\r\n            };\r\n\r\n            if (body) {\r\n                result.body = body;\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = HttpApiResolver;",
    "const Utils = require(`../../utils/Utils`);\r\n\r\n\r\n/**\r\n * WebSocketApiResolver\r\n */\r\nclass WebSocketApiResolver {\r\n\r\n    /**\r\n     * Normalaizes response\r\n     * @param {object} response - Response\r\n     * @param {object} normalizationObject -  Normalization object\r\n     * @returns {{}} - Normalized response\r\n     */\r\n    static normalizeResponse(response, normalizationObject) {\r\n        let result = {};\r\n\r\n        if (response.status === \"error\") {\r\n            throw response.error;\r\n        }\r\n\r\n        if (normalizationObject) {\r\n            if (normalizationObject.length) {\r\n                normalizationObject.forEach(responseField =>\r\n                    result[responseField] = response[responseField]);\r\n            } else if (normalizationObject.bodyKey) {\r\n                result = response[normalizationObject.bodyKey];\r\n            }\r\n        } else if (normalizationObject !== null) {\r\n            result = response;\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    /**\r\n     * @param action\r\n     * @param bodyKey\r\n     */\r\n    constructor({ action, bodyKey }) {\r\n        const me = this;\r\n\r\n        me.action = action;\r\n        me.bodyKey = bodyKey;\r\n    }\r\n\r\n    /**\r\n     * Builds request\r\n     * @param {object} parameters\r\n     * @param {object} body\r\n     * @returns {{action: *}}\r\n     */\r\n    build(parameters, body) {\r\n        const me = this;\r\n        const result = Utils.isObjectEmpty(parameters) && !me.bodyKey ? Object.assign({}, body) : Object.assign({}, parameters);\r\n\r\n        result.action = me.action;\r\n\r\n        if (body && me.bodyKey) {\r\n            result[me.bodyKey] = body;\r\n        }\r\n\r\n        return result;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = WebSocketApiResolver;",
    "/**\r\n * InvalidCredentialsError class\r\n */\r\nclass InvalidCredentialsError extends Error {\r\n\r\n    /**\r\n     * Creates new InvalidCredentialsError\r\n     */\r\n    constructor(message) {\r\n        super();\r\n\r\n        this.message = `Invalid credentials error during attempt to authenticate. Error: ${message}`;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = InvalidCredentialsError;",
    "/**\r\n * NoApiError class\r\n */\r\nclass NoApiError extends Error {\r\n\r\n    /**\r\n     * Creates new NoApiError\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        this.message = `No API selected.\\nPlease, choose one according to documentation.`;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = NoApiError;",
    "/**\r\n * NoAuthenticationCredentials class\r\n */\r\nclass NoAuthenticationCredentials extends Error {\r\n\r\n    /**\r\n     * Creates new NoAuthenticationCredentials\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        this.message = `No authentication credentials provided.\\nPlease, use credentials provided in documentation.`;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = NoAuthenticationCredentials;",
    "/**\r\n * ReconnectionAttemptFailedError class\r\n */\r\nclass ReconnectionAttemptFailedError extends Error {\r\n\r\n    /**\r\n     * Creates new InvalidCredentialsError\r\n     */\r\n    constructor(attempt) {\r\n        super();\r\n\r\n        this.message = `Reconnection attempt number ${attempt} is failed`;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = ReconnectionAttemptFailedError;",
    "/**\r\n * UnsupportedApiTransportError class\r\n */\r\nclass UnsupportedApiTransportError extends Error {\r\n\r\n    /**\r\n     * Creates new UnsupportedApiTransportError\r\n     */\r\n    constructor({ key, transport }) {\r\n        super();\r\n\r\n        this.message = `${key} API is not supported by the ${transport} transport.`;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = UnsupportedApiTransportError;",
    "/**\r\n * UnsupportedTransportError class\r\n */\r\nclass UnsupportedTransportError extends Error {\r\n\r\n    /**\r\n     * Creates new UnsupportedTransportError\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        this.message = `You are trying to use unsupported transport type.\\nPlease, use one of provided in documentation.`;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = UnsupportedTransportError;",
    "/**\r\n * WebSocketError class\r\n */\r\nclass WebSocketError extends Error {\r\n\r\n    /**\r\n     * Creates new WebSocketError\r\n     */\r\n    constructor(error) {\r\n        super();\r\n\r\n        this.message = `Error using WebSocket.\\nPlease, check server URL or try again later.\\n${error.message}`;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = WebSocketError;",
    "/**\r\n * BaseModel class\r\n */\r\nclass BaseModel {\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        console.warn(`The method \"toObject\" should be implemented in nested classes`);\r\n\r\n        return {};\r\n    }\r\n\r\n    /**\r\n     * Returns a stringified instance\r\n     * @returns {string}\r\n     */\r\n    toString() {\r\n        return JSON.stringify(this.toObject());\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = BaseModel;",
    "const BaseModel = require(`./BaseModel`);\r\n\r\n\r\n/**\r\n * Configuration model\r\n */\r\nclass Configuration extends BaseModel {\r\n\r\n    /**\r\n     * Creates new Configuration model\r\n     * @param {Object} options - model options object\r\n     * @param {string} options.name - Configuration parameter name.\r\n     * @param {string} options.value - Configuration parameter value.\r\n     */\r\n    constructor({ name, value, entityVersion } = {}) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get value() {\r\n        return this._value;\r\n    }\r\n\r\n    set value(value) {\r\n        this._value = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            name: this.name,\r\n            value: this.value,\r\n            entityVersion: this.entityVersion\r\n        };\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Configuration;",
    "const BaseModel = require(`./BaseModel`);\r\n\r\n\r\n/**\r\n * Device model\r\n */\r\nclass Device extends BaseModel {\r\n\r\n    /**\r\n     * Creates new Device model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.id - Device unique identifier\r\n     * @param {string} options.name - Device display name\r\n     * @param {object} options.data - Device data, a JSON object with an arbitrary structure\r\n     * @param {number} options.networkId - Associated network id\r\n     * @param {number} options.deviceTypeId - Associated deviceType id\r\n     * @param {boolean} options.isBlocked - Indicates whether device is isBlocked\r\n     */\r\n    constructor({ id, name, data, networkId, deviceTypeId, isBlocked } = {}) {\r\n        super();\r\n\r\n        this.id = id;\r\n        this.name = name;\r\n        this.data = data;\r\n        this.networkId = networkId;\r\n        this.deviceTypeId = deviceTypeId;\r\n        this.isBlocked = isBlocked;\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n\r\n    get name() {\r\n        return this._name; \r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get data() {\r\n        return this._data;\r\n    }\r\n\r\n    set data(value) {\r\n        this._data = value;\r\n    }\r\n\r\n    get networkId() {\r\n        return this._networkId;\r\n    }\r\n\r\n    set networkId(value) {\r\n        this._networkId = value;\r\n    }\r\n\r\n    get deviceTypeId() {\r\n        return this._deviceTypeId;\r\n    }\r\n\r\n    set deviceTypeId(value) {\r\n        this._deviceTypeId = value;\r\n    }\r\n\r\n    get isBlocked() {\r\n        return this._isBlocked;\r\n    }\r\n\r\n    set isBlocked(value) {\r\n        this._isBlocked = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            id: this.id,\r\n            name: this.name,\r\n            data: this.data,\r\n            networkId: this.networkId,\r\n            deviceTypeId: this.deviceTypeId,\r\n            isBlocked: this.isBlocked\r\n        };\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Device;",
    "const BaseModel = require(`./BaseModel`);\r\n\r\n\r\n/**\r\n * DeviceCommand model\r\n */\r\nclass DeviceCommand extends BaseModel {\r\n\r\n    /**\r\n     * Creates new DeviceCommand model\r\n     * @param {object} options - model options object\r\n     * @param {number} options.id - Command identifier\r\n     * @param {string} options.command - Command name\r\n     * @param {string} options.timestamp - Command UTC datetime (yyyy-MM-dd'T'HH:mm:ss.SSS ISO 8601)\r\n     * @param {string} options.lastUpdated - Last command update UTC datetime (yyyy-MM-dd'T'HH:mm:ss.SSS ISO 8601)\r\n     * @param {number} options.userId - Associated user identifier\r\n     * @param {string} options.deviceId - Device unique identifier\r\n     * @param {number} options.networkId - Network unique identifier\r\n     * @param {number} options.deviceTypeId - DeviceType unique identifier\r\n     * @param {object} options.parameters - Command parameters, a JSON object with an arbitrary structure\r\n     * @param {number} options.lifetime - Command lifetime, a number of seconds until this command expires\r\n     * @param {string} options.status - Command status, as reported by device or related infrastructure\r\n     * @param {object} options.result - Command execution result, an optional value that could be provided by device\r\n     */\r\n    constructor({ id, command, timestamp, lastUpdated, userId, deviceId, networkId,\r\n                    deviceTypeId, parameters, lifetime, status, result } = {}) {\r\n        super();\r\n\r\n        this.id = id;\r\n        this.command = command;\r\n        this.timestamp = timestamp;\r\n        this.lastUpdated = lastUpdated;\r\n        this.userId = userId;\r\n        this.deviceId = deviceId;\r\n        this.networkId = networkId;\r\n        this.deviceTypeId = deviceTypeId;\r\n        this.parameters = parameters;\r\n        this.lifetime = lifetime;\r\n        this.status = status;\r\n        this.result = result;\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n\r\n    get command() {\r\n        return this._command;\r\n    }\r\n\r\n    set command(value) {\r\n        this._command = value;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get notification() {\r\n        return this._notification;\r\n    }\r\n\r\n    set notification(value) {\r\n        this._notification = value;\r\n    }\r\n\r\n    get timestamp() {\r\n        return this._timestamp;\r\n    }\r\n\r\n    set timestamp(value) {\r\n        this._timestamp = value;\r\n    }\r\n\r\n    get lastUpdated() {\r\n        return this._lastUpdated;\r\n    }\r\n\r\n    set lastUpdated(value) {\r\n        this._lastUpdated = value;\r\n    }\r\n\r\n    get userId() {\r\n        return this._userId;\r\n    }\r\n\r\n    set userId(value) {\r\n        this._userId = value;\r\n    }\r\n\r\n    get deviceId() {\r\n        return this._deviceId;\r\n    }\r\n\r\n    set deviceId(value) {\r\n        this._deviceId = value;\r\n    }\r\n\r\n    get networkId() {\r\n        return this._networkId;\r\n    }\r\n\r\n    set networkId(value) {\r\n        this._networkId = value;\r\n    }\r\n\r\n    get deviceTypeId() {\r\n        return this._deviceTypeId;\r\n    }\r\n\r\n    set deviceTypeId(value) {\r\n        this._deviceTypeId = value;\r\n    }\r\n\r\n    get parameters() {\r\n        return this._parameters;\r\n    }\r\n\r\n    set parameters(value) {\r\n        this._parameters = value;\r\n    }\r\n\r\n    get lifetime() {\r\n        return this._lifetime;\r\n    }\r\n\r\n    set lifetime(value) {\r\n        this._lifetime = value;\r\n    }\r\n\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    set status(value) {\r\n        this._status = value;\r\n    }\r\n\r\n    get result() {\r\n        return this._result;\r\n    }\r\n\r\n    set result(value) {\r\n        this._result = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            id: this.id,\r\n            command: this.command,\r\n            timestamp: this.timestamp,\r\n            lastUpdated: this.lastUpdated,\r\n            userId: this.userId,\r\n            deviceId: this.deviceId,\r\n            networkId: this.networkId,\r\n            deviceTypeId: this.deviceTypeId,\r\n            parameters: this.parameters,\r\n            lifetime: this.lifetime,\r\n            status: this.status,\r\n            result: this.result\r\n        };\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceCommand;",
    "const BaseModel = require(`./BaseModel`);\r\n\r\n\r\n/**\r\n * DeviceNotification model\r\n */\r\nclass DeviceNotification extends BaseModel {\r\n\r\n    /**\r\n     * Creates new DeviceNotification model\r\n     * @param {object} options - model options object\r\n     * @param {number} options.id - Notification identifier\r\n     * @param {string} options.deviceId - Device unique identifier\r\n     * @param {number} options.networkId - Network unique identifier\r\n     * @param {number} options.deviceTypeId - Device type unique identifier\r\n     * @param {string} options.notification - Notification name\r\n     * @param {string} options.timestamp - Notification UTC datetime (yyyy-MM-dd'T'HH:mm:ss.SSS ISO 8601)\r\n     * @param {object} options.parameters - Notification parameters, a JSON object with an arbitrary structure\r\n     */\r\n    constructor({ id, deviceId, networkId, deviceTypeId, notification, timestamp, parameters } = {}) {\r\n        super();\r\n\r\n        this.id = id;\r\n        this.deviceId = deviceId;\r\n        this.networkId = networkId;\r\n        this.deviceTypeId = deviceTypeId;\r\n        this.notification = notification;\r\n        this.timestamp = timestamp;\r\n        this.parameters = parameters;\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n\r\n    get deviceId() {\r\n        return this._deviceId;\r\n    }\r\n\r\n    set deviceId(value) {\r\n        this._deviceId = value;\r\n    }\r\n\r\n    get networkId() {\r\n        return this._networkId;\r\n    }\r\n\r\n    set networkId(value) {\r\n        this._networkId = value;\r\n    }\r\n\r\n    get deviceTypeId() {\r\n        return this._deviceTypeId;\r\n    }\r\n\r\n    set deviceTypeId(value) {\r\n        this._deviceTypeId = value;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get notification() {\r\n        return this._notification;\r\n    }\r\n\r\n    set notification(value) {\r\n        this._notification = value;\r\n    }\r\n\r\n    get timestamp() {\r\n        return this._timestamp;\r\n    }\r\n\r\n    set timestamp(value) {\r\n        this._timestamp = value;\r\n    }\r\n\r\n    get parameters() {\r\n        return this._parameters;\r\n    }\r\n\r\n    set parameters(value) {\r\n        this._parameters = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            id: this.id,\r\n            deviceId: this.deviceId,\r\n            networkId: this.networkId,\r\n            deviceTypeId: this.deviceTypeId,\r\n            notification: this.notification,\r\n            timestamp: this.timestamp,\r\n            parameters: this.parameters\r\n        };\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceNotification;",
    "const BaseModel = require(`./BaseModel`);\r\n\r\n\r\n/**\r\n * DeviceType model\r\n */\r\nclass DeviceType extends BaseModel {\r\n\r\n    /**\r\n     * Creates new DeviceType model\r\n     * @param {object} options - model options object\r\n     * @param {number} options.id - Device type identifier\r\n     * @param {string} options.name - Device type name\r\n     * @param {string} options.description - Device type description\r\n     */\r\n    constructor({ id, name, description } = {}) {\r\n        super();\r\n\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get description() {\r\n        return this._description;\r\n    }\r\n\r\n    set description(value) {\r\n        this._description = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            id: this.id,\r\n            name: this.name,\r\n            description: this.description\r\n        };\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceType;",
    "const BaseModel = require(`./BaseModel`);\r\n\r\n\r\n/**\r\n * Network model\r\n */\r\nclass Network extends BaseModel {\r\n\r\n    /**\r\n     * Creates new Network model\r\n     * @param {object} options - model options object\r\n     * @param {number} options.id - Network identifier\r\n     * @param {string} options.name - Network name\r\n     * @param {string} options.description - Network description\r\n     */\r\n    constructor({ id, name, description } = {}) {\r\n        super();\r\n\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get description() {\r\n        return this._description;\r\n    }\r\n\r\n    set description(value) {\r\n        this._description = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            id: this.id,\r\n            name: this.name,\r\n            description: this.description\r\n        };\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Network;",
    "const BaseModel = require(`./BaseModel`);\r\n\r\n\r\n/**\r\n * Plugin model\r\n */\r\nclass Plugin extends BaseModel {\r\n\r\n    /**\r\n     * Creates new Plugin model\r\n     * @param {object} options - model options object\r\n     * @param {id} options.id - Plgin unique idnetifier\r\n     * @param {string} options.name - Plugin name\r\n     * @param {string} options.description - Plugin description\r\n     * @param {string} options.topicName - Plugin topic name\r\n     * @param {string} options.filter - Plugin filter\r\n     * @param {string} options.status - Plugin status\r\n     * @param {string} options.subscriptionId - Plugin subscribtion id\r\n     * @param {number} options.userId - Plugin user id\r\n     * @param {object} options.parameters - Json object with parameters\r\n     */\r\n    constructor({ id, name, description, topicName, filter, status, subscriptionId, userId, parameters } = {}) {\r\n        super();\r\n\r\n        this.id = id;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.topicName = topicName;\r\n        this.filter = filter;\r\n        this.status = status;\r\n        this.subscriptionId = subscriptionId;\r\n        this.userId = userId;\r\n        this.parameters = parameters;\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get description() {\r\n        return this._description;\r\n    }\r\n\r\n    set description(value) {\r\n        this._description = value;\r\n    }\r\n\r\n    get topicName() {\r\n        return this._topicName;\r\n    }\r\n\r\n    set topicName(value) {\r\n        this._topicName = value;\r\n    }\r\n\r\n    get filter() {\r\n        return this._filter;\r\n    }\r\n\r\n    set filter(value) {\r\n        this._filter = value;\r\n    }\r\n\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    set status(value) {\r\n        this._status = value;\r\n    }\r\n\r\n    get subscriptionId() {\r\n        return this._subscriptionId;\r\n    }\r\n\r\n    set subscriptionId(value) {\r\n        this._subscriptionId = value;\r\n    }\r\n\r\n    get userId() {\r\n        return this._userId;\r\n    }\r\n\r\n    set userId(value) {\r\n        this._userId = value;\r\n    }\r\n\r\n    get parameters() {\r\n        return this._parameters;\r\n    }\r\n\r\n    set parameters(value) {\r\n        this._parameters = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            id: this.id,\r\n            name: this.name,\r\n            description: this.description,\r\n            topicName: this.topicName,\r\n            filter: this.filter,\r\n            status: this.status,\r\n            subscriptionId: this.subscriptionId,\r\n            userId: this.userId,\r\n            parameters: this.parameters\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Plugin;",
    "const BaseModel = require(`./BaseModel`);\r\n\r\n\r\n/**\r\n * PluginToken model\r\n */\r\nclass PluginToken extends BaseModel {\r\n\r\n    /**\r\n     * Creates new PluginToken model\r\n     * @param {object} options - model options object\r\n     * @param {Array} options.actions - Plugin Token actions\r\n     * @param {string} options.expiration - Plugin expiration\r\n     * @param {number} options.type - Plugin type\r\n     * @param {string} options.topicName - Plugin topic name\r\n     */\r\n    constructor({ actions, expiration, type, topicName } = {}) {\r\n        super();\r\n\r\n        this.actions = actions;\r\n        this.expiration = expiration;\r\n        this.type = type;\r\n        this.topicName = topicName;\r\n    }\r\n\r\n    get actions() {\r\n        return this._actions;\r\n    }\r\n\r\n    set actions(value) {\r\n        this._actions = value;\r\n    }\r\n\r\n    get expiration() {\r\n        return this._expiration;\r\n    }\r\n\r\n    set expiration(value) {\r\n        this._expiration = value;\r\n    }\r\n\r\n    get type() {\r\n        return this._type; \r\n    }\r\n\r\n    set type(value) {\r\n        this._type = value;\r\n    }\r\n\r\n    get topicName() {\r\n        return this._topicName;\r\n    }\r\n\r\n    set topicName(value) {\r\n        this._topicName = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            a: this.actions,\r\n            e: this.expiration,\r\n            t: this.type,\r\n            tpc: this.topicName\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = PluginToken;",
    "const BaseModel = require(`./BaseModel`);\r\n\r\n\r\n/**\r\n * User model\r\n */\r\nclass User extends BaseModel {\r\n\r\n    /**\r\n     * Creates new User model\r\n     * @param {object} options - model options object\r\n     * @param {numebr} options.id - User identifier\r\n     * @param {string} options.login - User login using during authentication\r\n     * @param {number} options.role - User role. Available values: 0: Administrator role, 1: Client role.\r\n     * @param {number} options.status - User status. Available values: 0: The user is active, 1: The user has been locked out due to invalid login attempts, 2: The user has been disabled\r\n     * @param {string} options.lastLogin User last login timestamp (UTC)\r\n     * @param {object} options.data - User data, a JSON object with an arbitrary structure\r\n     * @param {string} options.password - User Password\r\n     * @param {boolean} options.introReviewed - Indicates if user reviewed an intro\r\n     * @param {boolean} options.allDeviceTypesAvailable - Is all device types awailable\r\n     */\r\n    constructor({ id, login, role, status, lastLogin, data, password, introReviewed, allDeviceTypesAvailable } = {}) {\r\n        super();\r\n\r\n        this.id = id;\r\n        this.login = login;\r\n        this.role = role;\r\n        this.status = status;\r\n        this.lastLogin = lastLogin;\r\n        this.data = data;\r\n        this.password = password;\r\n        this.introReviewed = introReviewed;\r\n        this.allDeviceTypesAvailable = allDeviceTypesAvailable;\r\n    }\r\n\r\n    get id() {\r\n        return this._id;\r\n    }\r\n\r\n    set id(value) {\r\n        this._id = value;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get login() {\r\n        return this._login;\r\n    }\r\n\r\n    set login(value) {\r\n        this._login = value;\r\n    }\r\n\r\n    get role() {\r\n        return this._role;\r\n    }\r\n\r\n    set role(value) {\r\n        this._role = value;\r\n    }\r\n\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    set status(value) {\r\n        this._status = value;\r\n    }\r\n\r\n    get lastLogin() {\r\n        return this._lastLogin;\r\n    }\r\n\r\n    set lastLogin(value) {\r\n        this._lastLogin = value;\r\n    }\r\n\r\n    get data() {\r\n        return this._data;\r\n    }\r\n\r\n    set data(value) {\r\n        this._data = value;\r\n    }\r\n\r\n    get password() {\r\n        return this._password;\r\n    }\r\n\r\n    set password(value) {\r\n        this._password = value;\r\n    }\r\n\r\n    get introReviewed() {\r\n        return this._introReviewed;\r\n    }\r\n\r\n    set introReviewed(value) {\r\n        this._introReviewed = value;\r\n    }\r\n\r\n    get allDeviceTypesAvailable() {\r\n        return this._allDeviceTypesAvailable;\r\n    }\r\n\r\n    set allDeviceTypesAvailable(value) {\r\n        this._allDeviceTypesAvailable = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            id: this.id,\r\n            login: this.login,\r\n            role: this.role,\r\n            status: this.status,\r\n            lastLogin: this.lastLogin,\r\n            data: this.data,\r\n            password: this.password,\r\n            introReviewed: this.introReviewed,\r\n            allDeviceTypesAvailable: this.allDeviceTypesAvailable\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = User;",
    "const BaseModel = require(`./BaseModel`);\r\n\r\n\r\n/**\r\n * UserToken model\r\n */\r\nclass UserToken extends BaseModel {\r\n\r\n    /**\r\n     * Creates new UserToken model\r\n     * @param {object} options - model options object\r\n     * @param {number} options.userId - User id\r\n     * @param {Array} options.actions - User Actions\r\n     * @param {Array} options.networkIds - Network id's\r\n     * @param {Array} options.deviceTypeIds - Devicetype id's\r\n     * @param {string} options.expiration - Token expiration datetme\r\n     */\r\n    constructor({ userId, actions, networkIds, deviceTypeIds, expiration, refreshExpiration } = {}) {\r\n        super();\r\n\r\n        this.userId = userId;\r\n        this.actions = actions;\r\n        this.networkIds = networkIds;\r\n        this.deviceTypeIds = deviceTypeIds;\r\n        this.expiration = expiration;\r\n        this.refreshExpiration = refreshExpiration;\r\n    }\r\n\r\n    get userId() {\r\n        return this._userId;\r\n    }\r\n\r\n    set userId(value) {\r\n        this._userId = value;\r\n    }\r\n\r\n    get actions() {\r\n        return this._actions;\r\n    }\r\n\r\n    set actions(value) {\r\n        this._actions = value;\r\n    }\r\n\r\n    get networkIds() {\r\n        return this._networkIds; \r\n    }\r\n\r\n    set networkIds(value) {\r\n        this._networkIds = value;\r\n    }\r\n\r\n    get deviceTypeIds() {\r\n        return this._deviceTypeIds;\r\n    }\r\n\r\n    set deviceTypeIds(value) {\r\n        this._deviceTypeIds = value;\r\n    }\r\n\r\n    get expiration() {\r\n        return this._expiration;\r\n    }\r\n\r\n    set expiration(value) {\r\n        this._expiration = value;\r\n    }\r\n\r\n    get refreshExpiration() {\r\n        return this._refreshExpiration;\r\n    }\r\n\r\n    set refreshExpiration(value) {\r\n        this._refreshExpiration = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            userId: this.userId,\r\n            actions: this.actions,\r\n            networkIds: this.networkIds,\r\n            deviceTypeIds: this.deviceTypeIds,\r\n            expiration: this.expiration,\r\n            refreshExpiration: this.refreshExpiration\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = UserToken;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * CommandGetQuery class\r\n */\r\nclass CommandGetQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new CommandGetQuery model\r\n     * @param {object} options - model options object\r\n     * @param {boolean} options.returnUpdatedCommands - Checks if updated commands should be returned\r\n     */\r\n    constructor({ returnUpdatedCommands=false } = {}) {\r\n        super();\r\n\r\n        this.returnUpdatedCommands = returnUpdatedCommands;\r\n    }\r\n\r\n    get returnUpdatedCommands() {\r\n        return this._returnUpdatedCommands;\r\n    }\r\n\r\n    set returnUpdatedCommands(value) {\r\n        this._returnUpdatedCommands = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            returnUpdatedCommands: this.returnUpdatedCommands\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = CommandGetQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * CommandListQuery class\r\n */\r\nclass CommandListQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new CommandListQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.deviceId - Device ID\r\n     * @param {string} options.start - Start timestamp\r\n     * @param {string} options.end - End timestamp\r\n     * @param {string} options.command - Command name\r\n     * @param {string} options.status - Command status\r\n     * @param {string} options.sortField - Sort field\r\n     * @param {string} options.sortOrder - Sort order\r\n     * @param {number} options.take - Limit param\r\n     * @param {number} options.skip - Skip param\r\n     */\r\n    constructor({ deviceId, start, end, command, status, sortField, sortOrder, take, skip } = {}) {\r\n        super();\r\n\r\n        this.deviceId = deviceId;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.command = command;\r\n        this.status = status;\r\n        this.sortField = sortField;\r\n        this.sortOrder = sortOrder;\r\n        this.take = take;\r\n        this.skip = skip;\r\n    }\r\n\r\n    get deviceId() {\r\n        return this._deviceId;\r\n    }\r\n\r\n    set deviceId(value) {\r\n        this._deviceId = value;\r\n    }\r\n\r\n    get start() {\r\n        return this._start;\r\n    }\r\n\r\n    set start(value) {\r\n        this._start = value;\r\n    }\r\n\r\n    get end() {\r\n        return this._end;\r\n    }\r\n\r\n    set end(value) {\r\n        this._end = value;\r\n    }\r\n\r\n    get command() {\r\n        return this._command;\r\n    }\r\n\r\n    set command(value) {\r\n        this._command = value;\r\n    }\r\n\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    set status(value) {\r\n        this._status = value;\r\n    }\r\n\r\n    get sortField() {\r\n        return this._sortField;\r\n    }\r\n\r\n    set sortField(value) {\r\n        this._sortField = value;\r\n    }\r\n\r\n    get sortOrder() {\r\n        return this._sortOrder;\r\n    }\r\n\r\n    set sortOrder(value) {\r\n        this._sortOrder = value;\r\n    }\r\n\r\n    get take() {\r\n        return this._take;\r\n    }\r\n\r\n    set take(value) {\r\n        this._take = value;\r\n    }\r\n\r\n    get skip() {\r\n        return this._skip;\r\n    }\r\n\r\n    set skip(value) {\r\n        this._skip = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            deviceId: this.deviceId,\r\n            start: this.start,\r\n            end: this.end,\r\n            command: this.command,\r\n            status: this.status,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder,\r\n            take: this.take,\r\n            skip: this.skip\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = CommandListQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * CommandPollManyQuery class\r\n */\r\nclass CommandPollManyQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new CommandPollManyQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.deviceIds - List of device IDs\r\n     * @param {string} options.networkIds - List of network IDs\r\n     * @param {string} options.deviceTypeIds - List of devicetype IDs\r\n     * @param {string} options.names - Command names\r\n     * @param {string} options.timestamp - Timestamp to start from\r\n     * @param {number} options.waitTimeout - Wait timeout in seconds\r\n     * @param {number} options.limit - Limit number of commands\r\n     */\r\n    constructor({ deviceIds, networkIds, deviceTypeIds, names, timestamp, waitTimeout, limit } = {}) {\r\n        super();\r\n\r\n        this.deviceIds = deviceIds;\r\n        this.networkIds = networkIds;\r\n        this.deviceTypeIds = deviceTypeIds;\r\n        this.names = names;\r\n        this.timestamp = timestamp;\r\n        this.waitTimeout = waitTimeout;\r\n        this.limit = limit;\r\n    }\r\n\r\n    get deviceIds() {\r\n        return this._deviceIds;\r\n    }\r\n\r\n    set deviceIds(value) {\r\n        this._deviceIds = value;\r\n    }\r\n\r\n    get networkIds() {\r\n        return this._networkIds;\r\n    }\r\n\r\n    set networkIds(value) {\r\n        this._networkIds = value;\r\n    }\r\n\r\n    get deviceTypeIds() {\r\n        return this._deviceTypeIds;\r\n    }\r\n\r\n    set deviceTypeIds(value) {\r\n        this._deviceTypeIds = value;\r\n    }\r\n\r\n    get names() {\r\n        return this._names;\r\n    }\r\n\r\n    set names(value) {\r\n        this._names = value;\r\n    }\r\n\r\n    get timestamp() {\r\n        return this._timestamp;\r\n    }\r\n\r\n    set timestamp(value) {\r\n        this._timestamp = value;\r\n    }\r\n\r\n    get waitTimeout() {\r\n        return this._waitTimeout;\r\n    }\r\n\r\n    set waitTimeout(value) {\r\n        this._waitTimeout = value;\r\n    }\r\n\r\n    get limit() {\r\n        return this._limit;\r\n    }\r\n\r\n    set limit(value) {\r\n        this._limit = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            deviceIds: this.deviceIds,\r\n            networkIds: this.networkIds,\r\n            deviceTypeIds: this.deviceTypeIds,\r\n            names: this.names,\r\n            timestamp: this.timestamp,\r\n            waitTimeout: this.waitTimeout,\r\n            limit: this.limit\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = CommandPollManyQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * CommandPollQuery class\r\n */\r\nclass CommandPollQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new CommandPollQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.deviceId - Device ID\r\n     * @param {string} options.names - Command names\r\n     * @param {number} options.timestamp - Timestamp to start from\r\n     * @param {boolean} options.returnUpdatedCommands - Checks if updated commands should be returned\r\n     * @param {number} options.waitTimeout - Wait timeout in seconds\r\n     * @param {number} options.limit - Limit number of commands\r\n     */\r\n    constructor({ deviceId, names, timestamp, returnUpdatedCommands, waitTimeout, limit } = {}) {\r\n        super();\r\n\r\n        this.deviceId = deviceId;\r\n        this.names = names;\r\n        this.timestamp = timestamp;\r\n        this.returnUpdatedCommands = returnUpdatedCommands;\r\n        this.waitTimeout = waitTimeout;\r\n        this.limit = limit;\r\n    }\r\n\r\n    get deviceId() {\r\n        return this._deviceId;\r\n    }\r\n\r\n    set deviceId(value) {\r\n        this._deviceId = value;\r\n    }\r\n\r\n    get names() {\r\n        return this._names;\r\n    }\r\n\r\n    set names(value) {\r\n        this._names = value;\r\n    }\r\n\r\n    get timestamp() {\r\n        return this._timestamp;\r\n    }\r\n\r\n    set timestamp(value) {\r\n        this._timestamp = value;\r\n    }\r\n\r\n    get returnUpdatedCommands() {\r\n        return this._returnUpdatedCommands;\r\n    }\r\n\r\n    set returnUpdatedCommands(value) {\r\n        this._returnUpdatedCommands = value;\r\n    }\r\n\r\n    get waitTimeout() {\r\n        return this._waitTimeout;\r\n    }\r\n\r\n    set waitTimeout(value) {\r\n        this._waitTimeout = value;\r\n    }\r\n\r\n    get limit() {\r\n        return this._limit;\r\n    }\r\n\r\n    set limit(value) {\r\n        this._limit = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            deviceId: this.deviceId,\r\n            names: this.names,\r\n            timestamp: this.timestamp,\r\n            returnUpdatedCommands: this.returnUpdatedCommands,\r\n            waitTimeout: this.waitTimeout,\r\n            limit: this.limit\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = CommandPollQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * CommandWaitQuery class\r\n */\r\nclass CommandWaitQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new CommandWaitQuery model\r\n     * @param {Object} options - model options object\r\n     * @param {Number} options.waitTimeout - wait timeout (sec)\r\n     */\r\n    constructor({ waitTimeout } = {}) {\r\n        super();\r\n\r\n        this.waitTimeout = waitTimeout;\r\n    }\r\n\r\n    get waitTimeout() {\r\n        return this._waitTimeout;\r\n    }\r\n\r\n    set waitTimeout(value) {\r\n        this._waitTimeout = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return { waitTimeout: this.waitTimeout }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = CommandWaitQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * DeviceCountQuery class\r\n */\r\nclass DeviceCountQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new DeviceCountQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.name - Filter by device name\r\n     * @param {string} options.namePattern - Filter by device name pattern. In pattern wildcards '%' and '_' can be used\r\n     * @param {number} options.networkId - Filter by associated network identifier\r\n     * @param {string} options.networkName - Filter by associated network name\r\n     */\r\n    constructor({ name, namePattern, networkId, networkName } = {}) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.namePattern = namePattern;\r\n        this.networkId = networkId;\r\n        this.networkName = networkName;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get namePattern() {\r\n        return this._namePattern;\r\n    }\r\n\r\n    set namePattern(value) {\r\n        this._namePattern = value;\r\n    }\r\n\r\n    get networkId() {\r\n        return this._networkId;\r\n    }\r\n\r\n    set networkId(value) {\r\n        this._networkId = value;\r\n    }\r\n\r\n    get networkName() {\r\n        return this._networkName;\r\n    }\r\n\r\n    set networkName(value) {\r\n        this._networkName = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            name: this.name,\r\n            namePattern: this.namePattern,\r\n            networkId: this.networkId,\r\n            networkName: this.networkName\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceCountQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * DeviceListQuery class\r\n */\r\nclass DeviceListQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new DeviceListQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.name - Filter by device name\r\n     * @param {string} options.namePattern - Filter by device name pattern. In pattern wildcards '%' and '_' can be used\r\n     * @param {number} options.networkId - Filter by associated network identifier\r\n     * @param {string} options.networkName - Filter by associated network name\r\n     * @param {string} options.sortField - Result list sort field\r\n     * @param {string} options.sortOrder - Result list sort order. The sortField should be specified\r\n     * @param {number} options.take - Number of records to take from the result list\r\n     * @param {number} options.skip - Number of records to skip from the result list\r\n     */\r\n    constructor({ name, namePattern, networkId, networkName, sortField, sortOrder, take, skip } = {}) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.namePattern = namePattern;\r\n        this.networkId = networkId;\r\n        this.networkName = networkName;\r\n        this.sortField = sortField;\r\n        this.sortOrder = sortOrder;\r\n        this.take = take;\r\n        this.skip = skip;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get namePattern() {\r\n        return this._namePattern;\r\n    }\r\n\r\n    set namePattern(value) {\r\n        this._namePattern = value;\r\n    }\r\n\r\n    get networkId() {\r\n        return this._networkId;\r\n    }\r\n\r\n    set networkId(value) {\r\n        this._networkId = value;\r\n    }\r\n\r\n    get networkName() {\r\n        return this._networkName;\r\n    }\r\n\r\n    set networkName(value) {\r\n        this._networkName = value;\r\n    }\r\n\r\n    get sortField() {\r\n        return this._sortField;\r\n    }\r\n\r\n    set sortField(value) {\r\n        this._sortField = value;\r\n    }\r\n\r\n    get sortOrder() {\r\n        return this._sortOrder;\r\n    }\r\n\r\n    set sortOrder(value) {\r\n        this._sortOrder = value;\r\n    }\r\n\r\n    get take() {\r\n        return this._take;\r\n    }\r\n\r\n    set take(value) {\r\n        this._take = value;\r\n    }\r\n\r\n    get skip() {\r\n        return this._skip;\r\n    }\r\n\r\n    set skip(value) {\r\n        this._skip = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            name: this.name,\r\n            namePattern: this.namePattern,\r\n            networkId: this.networkId,\r\n            networkName: this.networkName,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder,\r\n            take: this.take,\r\n            skip: this.skip\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceListQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * DeviceTypeCountQuery class\r\n */\r\nclass DeviceTypeCountQuery extends BaseModel {\r\n    \r\n    /**\r\n     * Creates new DeviceTypeCountQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.name - Filter by device type name\r\n     * @param {string} options.namePattern - Filter by device type name pattern. In pattern wildcards '%' and '_' can be used\r\n     */\r\n    constructor({ name, namePattern } = {}) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.namePattern = namePattern;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get namePattern() {\r\n        return this._namePattern;\r\n    }\r\n\r\n    set namePattern(value) {\r\n        this._namePattern = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            name: this.name,\r\n            namePattern: this.namePattern\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceTypeCountQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * DeviceTypeDeleteQuery class\r\n */\r\nclass DeviceTypeDeleteQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new DeviceTypeDeleteQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.deviceTypeId - deviceType's id\r\n     * @param {boolean} options.force - flag for force delete\r\n     */\r\n    constructor({ deviceTypeId, force } = {}) {\r\n        super();\r\n\r\n        this.deviceTypeId = deviceTypeId;\r\n        this.force = force;\r\n    }\r\n\r\n    get deviceTypeId() {\r\n        return this._deviceTypeId;\r\n    }\r\n\r\n    set deviceTypeId(value) {\r\n        this._deviceTypeId = value;\r\n    }\r\n\r\n    get force() {\r\n        return this._force;\r\n    }\r\n\r\n    set force(value) {\r\n        this._force = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            deviceTypeId: this.deviceTypeId,\r\n            force: this.force\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceTypeDeleteQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * DeviceTypeListQuery class\r\n */\r\nclass DeviceTypeListQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new DeviceTypeListQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.name - Filter by device type name\r\n     * @param {string} options.namePattern - Filter by device type name pattern. In pattern wildcards '%' and '_' can be used\r\n     * @param {string} options.sortField - Result list sort field\r\n     * @param {string} options.sortOrder - Result list sort order. The sortField should be specified\r\n     * @param {number} options.take - Number of records to take from the result list\r\n     * @param {number} options.skip - Number of records to skip from the result list\r\n     */\r\n    constructor({ name, namePattern, sortField, sortOrder, take, skip } = {}) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.namePattern = namePattern;\r\n        this.sortField = sortField;\r\n        this.sortOrder = sortOrder;\r\n        this.take = take;\r\n        this.skip = skip;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get namePattern() {\r\n        return this._namePattern;\r\n    }\r\n\r\n    set namePattern(value) {\r\n        this._namePattern = value;\r\n    }\r\n\r\n    get sortField() {\r\n        return this._sortField;\r\n    }\r\n\r\n    set sortField(value) {\r\n        this._sortField = value;\r\n    }\r\n\r\n    get sortOrder() {\r\n        return this._sortOrder;\r\n    }\r\n\r\n    set sortOrder(value) {\r\n        this._sortOrder = value;\r\n    }\r\n\r\n    get take() {\r\n        return this._take;\r\n    }\r\n\r\n    set take(value) {\r\n        this._take = value;\r\n    }\r\n\r\n    get skip() {\r\n        return this._skip;\r\n    }\r\n\r\n    set skip(value) {\r\n        this._skip = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            name: this.name,\r\n            namePattern: this.namePattern,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder,\r\n            take: this.take,\r\n            skip: this.skip\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = DeviceTypeListQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * NetworkCountQuery class\r\n */\r\nclass NetworkCountQuery extends BaseModel {\r\n    \r\n    /**\r\n     * Creates new NetworkCountQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.name - Filter by device type name\r\n     * @param {string} options.namePattern - Filter by device type name pattern. In pattern wildcards '%' and '_' can be used\r\n     */\r\n    constructor({ name, namePattern } = {}) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.namePattern = namePattern;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get namePattern() {\r\n        return this._namePattern;\r\n    }\r\n\r\n    set namePattern(value) {\r\n        this._namePattern = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            name: this.name,\r\n            namePattern: this.namePattern\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = NetworkCountQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * NetworkDeleteQuery class\r\n */\r\nclass NetworkDeleteQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new NetworkDeleteQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.networkId - network's id\r\n     * @param {boolean} options.force - flag for force delete\r\n     */\r\n    constructor({ networkId, force } = {}) {\r\n        super();\r\n\r\n        this.networkId = networkId;\r\n        this.force = force;\r\n    }\r\n\r\n    get networkId() {\r\n        return this._networkId;\r\n    }\r\n\r\n    set networkId(value) {\r\n        this._networkId = value;\r\n    }\r\n\r\n    get force() {\r\n        return this._force;\r\n    }\r\n\r\n    set force(value) {\r\n        this._force = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            networkId: this.networkId,\r\n            force: this.force\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = NetworkDeleteQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * NetworkListQuery class\r\n */\r\nclass NetworkListQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new NetworkListQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.name - Filter by device type name\r\n     * @param {string} options.namePattern - Filter by device type name pattern. In pattern wildcards '%' and '_' can be used\r\n     * @param {string} options.sortField - Result list sort field\r\n     * @param {string} options.sortOrder - Result list sort order. The sortField should be specified\r\n     * @param {number} options.take - Number of records to take from the result list\r\n     * @param {number} options.skip - Number of records to skip from the result list\r\n     */\r\n    constructor({ name, namePattern, sortField, sortOrder, take, skip } = {}) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.namePattern = namePattern;\r\n        this.sortField = sortField;\r\n        this.sortOrder = sortOrder;\r\n        this.take = take;\r\n        this.skip = skip;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get namePattern() {\r\n        return this._namePattern;\r\n    }\r\n\r\n    set namePattern(value) {\r\n        this._namePattern = value;\r\n    }\r\n\r\n    get sortField() {\r\n        return this._sortField;\r\n    }\r\n\r\n    set sortField(value) {\r\n        this._sortField = value;\r\n    }\r\n\r\n    get sortOrder() {\r\n        return this._sortOrder;\r\n    }\r\n\r\n    set sortOrder(value) {\r\n        this._sortOrder = value;\r\n    }\r\n\r\n    get take() {\r\n        return this._take;\r\n    }\r\n\r\n    set take(value) {\r\n        this._take = value;\r\n    }\r\n\r\n    get skip() {\r\n        return this._skip;\r\n    }\r\n\r\n    set skip(value) {\r\n        this._skip = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            name: this.name,\r\n            namePattern: this.namePattern,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder,\r\n            take: this.take,\r\n            skip: this.skip\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = NetworkListQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * NotificationListQuery class\r\n */\r\nclass NotificationListQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new NotificationListQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.deviceId - Device ID\r\n     * @param {string} options.start - Start timestamp\r\n     * @param {string} options.end - End timestamp\r\n     * @param {string} options.notification - Notification name\r\n     * @param {string} options.sortField - Sort field\r\n     * @param {string} options.sortOrder - Sort order\r\n     * @param {number} options.take - Limit param\r\n     * @param {number} options.skip - Skip param\r\n     */\r\n    constructor({ deviceId, start, end, notification, sortField, sortOrder, take, skip } = {}) {\r\n        super();\r\n\r\n        this.deviceId = deviceId;\r\n        this.start = start;\r\n        this.end = end;\r\n        this.notification = notification;\r\n        this.sortField = sortField;\r\n        this.sortOrder = sortOrder;\r\n        this.take = take;\r\n        this.skip = skip;\r\n    }\r\n\r\n    get deviceId() {\r\n        return this._deviceId;\r\n    }\r\n\r\n    set deviceId(value) {\r\n        this._deviceId = value;\r\n    }\r\n\r\n    get start() {\r\n        return this._start;\r\n    }\r\n\r\n    set start(value) {\r\n        this._start = value;\r\n    }\r\n\r\n    get end() {\r\n        return this._end;\r\n    }\r\n\r\n    set end(value) {\r\n        this._end = value;\r\n    }\r\n\r\n    get notification() {\r\n        return this._notification;\r\n    }\r\n\r\n    set notification(value) {\r\n        this._notification = value;\r\n    }\r\n\r\n    get sortField() {\r\n        return this._sortField;\r\n    }\r\n\r\n    set sortField(value) {\r\n        this._sortField = value;\r\n    }\r\n\r\n    get sortOrder() {\r\n        return this._sortOrder;\r\n    }\r\n\r\n    set sortOrder(value) {\r\n        this._sortOrder = value;\r\n    }\r\n\r\n    get take() {\r\n        return this._take;\r\n    }\r\n\r\n    set take(value) {\r\n        this._take = value;\r\n    }\r\n\r\n    get skip() {\r\n        return this._skip;\r\n    }\r\n\r\n    set skip(value) {\r\n        this._skip = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            deviceId: this.deviceId,\r\n            start: this.start,\r\n            end: this.end,\r\n            notification: this.notification,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder,\r\n            take: this.take,\r\n            skip: this.skip\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = NotificationListQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * NotificationPollManyQuery class\r\n */\r\nclass NotificationPollManyQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new NotificationPollManyQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.deviceIds - List of device IDs\r\n     * @param {string} options.networkIds - List of network IDs\r\n     * @param {string} options.deviceTypeIds - List of devicetype IDs\r\n     * @param {string} options.names - Notification names\r\n     * @param {string} options.timestamp - Timestamp to start from\r\n     * @param {number} options.waitTimeout - Wait timeout in seconds\r\n     */\r\n    constructor({ deviceIds, networkIds, deviceTypeIds, names, timestamp, waitTimeout } = {}) {\r\n        super();\r\n\r\n        this.deviceIds = deviceIds;\r\n        this.networkIds = networkIds;\r\n        this.deviceTypeIds = deviceTypeIds;\r\n        this.names = names;\r\n        this.timestamp = timestamp;\r\n        this.waitTimeout = waitTimeout;\r\n    }\r\n\r\n    get deviceIds() {\r\n        return this._deviceIds;\r\n    }\r\n\r\n    set deviceIds(value) {\r\n        this._deviceIds = value;\r\n    }\r\n\r\n    get networkIds() {\r\n        return this._networkIds;\r\n    }\r\n\r\n    set networkIds(value) {\r\n        this._networkIds = value;\r\n    }\r\n\r\n    get deviceTypeIds() {\r\n        return this._deviceTypeIds;\r\n    }\r\n\r\n    set deviceTypeIds(value) {\r\n        this._deviceTypeIds = value;\r\n    }\r\n\r\n    get names() {\r\n        return this._names;\r\n    }\r\n\r\n    set names(value) {\r\n        this._names = value;\r\n    }\r\n\r\n    get timestamp() {\r\n        return this._timestamp;\r\n    }\r\n\r\n    set timestamp(value) {\r\n        this._timestamp = value;\r\n    }\r\n\r\n    get waitTimeout() {\r\n        return this._waitTimeout;\r\n    }\r\n\r\n    set waitTimeout(value) {\r\n        this._waitTimeout = value;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            deviceIds: this.deviceIds,\r\n            networkIds: this.networkIds,\r\n            deviceTypeIds: this.deviceTypeIds,\r\n            names: this.names,\r\n            timestamp: this.timestamp,\r\n            waitTimeout: this.waitTimeout\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = NotificationPollManyQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * NotificationPollQuery class\r\n */\r\nclass NotificationPollQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new NotificationPollQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.deviceId - Device ID\r\n     * @param {string} options.names - Notification names\r\n     * @param {number} options.timestamp - Timestamp to start from\r\n     * @param {number} options.waitTimeout - Wait timeout in seconds\r\n     */\r\n    constructor({ deviceId, names, timestamp, waitTimeout } = {}) {\r\n        super();\r\n\r\n        this.deviceId = deviceId;\r\n        this.names = names;\r\n        this.timestamp = timestamp;\r\n        this.waitTimeout = waitTimeout;\r\n    }\r\n\r\n    get deviceId() {\r\n        return this._deviceId;\r\n    }\r\n\r\n    set deviceId(value) {\r\n        this._deviceId = value;\r\n    }\r\n\r\n    get names() {\r\n        return this._names;\r\n    }\r\n\r\n    set names(value) {\r\n        this._names = value;\r\n    }\r\n\r\n    get timestamp() {\r\n        return this._timestamp;\r\n    }\r\n\r\n    set timestamp(value) {\r\n        this._timestamp = value;\r\n    }\r\n\r\n    get waitTimeout() {\r\n        return this._waitTimeout;\r\n    }\r\n\r\n    set waitTimeout(value) {\r\n        this._waitTimeout = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            deviceId: this.deviceId,\r\n            names: this.names,\r\n            timestamp: this.timestamp,\r\n            waitTimeout: this.waitTimeout\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = NotificationPollQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * PluginCountQuery class\r\n */\r\nclass PluginCountQuery extends BaseModel {\r\n    \r\n    /**\r\n     * Creates new PluginCountQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.name - Filter by plugin name\r\n     * @param {string} options.namePattern - Filter by plugin name pattern. In pattern wildcards '%' and '_' can be used\r\n     * @param {string} options.topicName - Filter by plugin topic name\r\n     * @param {number} options.status - Filter by plugin status\r\n     * @param {number} options.userId - Filter by associated user identifier. Only admin can see other users' plugins\r\n     */\r\n    constructor({ name, namePattern, topicName, status, userId } = {}) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.namePattern = namePattern;\r\n        this.topicName = topicName;\r\n        this.status = status;\r\n        this.userId = userId;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get namePattern() {\r\n        return this._namePattern;\r\n    }\r\n\r\n    set namePattern(value) {\r\n        this._namePattern = value;\r\n    }\r\n\r\n    get topicName() {\r\n        return this._topicName;\r\n    }\r\n\r\n    set topicName(value) {\r\n        this._topicName = value;\r\n    }\r\n\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    set status(value) {\r\n        this._status = value;\r\n    }\r\n\r\n    get userId() {\r\n        return this._userId;\r\n    }\r\n\r\n    set userId(value) {\r\n        this._userId = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            name: this.name,\r\n            namePattern: this.namePattern,\r\n            topicName: this.topicName,\r\n            status: this.status,\r\n            userId: this.userId\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = PluginCountQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * PluginListQuery class\r\n */\r\nclass PluginListQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new PluginListQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} options.name - Filter by plugin name\r\n     * @param {string} options.namePattern - Filter by plugin name pattern. In pattern wildcards '%' and '_' can be used\r\n     * @param {string} options.topicName - Filter by plugin topic nathis.\r\n     * @param {string} options.status - Filter by plugin status.\r\n     * @param {number} options.userId - Filter by associated user identifier. Only admin can see other users' plugins\r\n     * @param {string} options.sortField - Result list sort field\r\n     * @param {string} options.sortOrder - Result list sort order. The sortField should be specified\r\n     * @param {number} options.take - Number of records to take from the result list\r\n     * @param {number} options.skip - Number of records to skip from the result list\r\n     */\r\n    constructor({ name, namePattern, topicName, status, userId, sortField, sortOrder, take, skip } = {}) {\r\n        super();\r\n\r\n        this.name = name;\r\n        this.namePattern = namePattern;\r\n        this.topicName = topicName;\r\n        this.status = status;\r\n        this.userId = userId;\r\n        this.sortField = sortField;\r\n        this.sortOrder = sortOrder;\r\n        this.take = take;\r\n        this.skip = skip;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get namePattern() {\r\n        return this._namePattern;\r\n    }\r\n\r\n    set namePattern(value) {\r\n        this._namePattern = value;\r\n    }\r\n\r\n    get topicName() {\r\n        return this._topicName;\r\n    }\r\n\r\n    set topicName(value) {\r\n        this._topicName = value;\r\n    }\r\n\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    set status(value) {\r\n        this._status = value;\r\n    }\r\n\r\n    get userId() {\r\n        return this._userId;\r\n    }\r\n\r\n    set userId(value) {\r\n        this._userId = value;\r\n    }\r\n\r\n    get sortField() {\r\n        return this._sortField;\r\n    }\r\n\r\n    set sortField(value) {\r\n        this._sortField = value;\r\n    }\r\n\r\n    get sortOrder() {\r\n        return this._sortOrder;\r\n    }\r\n\r\n    set sortOrder(value) {\r\n        this._sortOrder = value;\r\n    }\r\n\r\n    get take() {\r\n        return this._take;\r\n    }\r\n\r\n    set take(value) {\r\n        this._take = value;\r\n    }\r\n\r\n    get skip() {\r\n        return this._skip;\r\n    }\r\n\r\n    set skip(value) {\r\n        this._skip = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            name: this.name,\r\n            namePattern: this.namePattern,\r\n            topicName: this.topicName,\r\n            status: this.status,\r\n            userId: this.userId,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder,\r\n            take: this.take,\r\n            skip: this.skip\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = PluginListQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * PluginRegisterQuery class\r\n */\r\nclass PluginRegisterQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates new PluginRegisterQuery model\r\n     * @param {object} options - model options object\r\n     * @param {string} [options.deviceId] - Device device_id\r\n     * @param {string} [options.networkIds] - Network ids\r\n     * @param {string} [options.deviceTypeIds] - Device type ids\r\n     * @param {string} [options.names] - Command/Notification names\r\n     * @param {boolean} [options.returnCommands] - Checks if commands should be returned\r\n     * @param {boolean} [options.returnUpdatedCommands] - Checks if updated commands should be returned\r\n     * @param {boolean} [options.returnNotifications] - Checks if commands should be returned\r\n     */\r\n    constructor({ deviceId, networkIds, deviceTypeIds, names, returnCommands = true, returnUpdatedCommands = false, returnNotifications = false } = {}) {\r\n        super();\r\n        this.deviceId = deviceId;\r\n        this.networkIds = networkIds;\r\n        this.deviceTypeIds = deviceTypeIds;\r\n        this.names = names;\r\n        this.returnCommands = returnCommands;\r\n        this.returnUpdatedCommands = returnUpdatedCommands;\r\n        this.returnNotifications = returnNotifications;\r\n    }\r\n\r\n    get deviceId() {\r\n        return this._deviceId;\r\n    }\r\n\r\n    set deviceId(value) {\r\n        this._deviceId = value;\r\n    }\r\n\r\n    get networkIds() {\r\n        return this._networkIds;\r\n    }\r\n\r\n    set networkIds(value) {\r\n        this._networkIds = value;\r\n    }\r\n\r\n    get deviceTypeIds() {\r\n        return this._deviceTypeIds;\r\n    }\r\n\r\n    set deviceTypeIds(value) {\r\n        this._deviceTypeIds = value;\r\n    }\r\n\r\n    get names() {\r\n        return this._names;\r\n    }\r\n\r\n    set names(value) {\r\n        this._names = value;\r\n    }\r\n\r\n    get returnCommands() {\r\n        return this._returnCommands;\r\n    }\r\n\r\n    set returnCommands(value) {\r\n        this._returnCommands = value;\r\n    }\r\n\r\n    get returnUpdatedCommands() {\r\n        return this._returnUpdatedCommands;\r\n    }\r\n\r\n    set returnUpdatedCommands(value) {\r\n        this._returnUpdatedCommands = value;\r\n    }\r\n\r\n    get returnNotifications() {\r\n        return this._returnNotifications;\r\n    }\r\n\r\n    set returnNotifications(value) {\r\n        this._returnNotifications = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            deviceId: this.deviceId,\r\n            networkIds: this.networkIds,\r\n            deviceTypeIds: this.deviceTypeIds,\r\n            names: this.names,\r\n            returnCommands: this.returnCommands,\r\n            returnUpdatedCommands: this.returnUpdatedCommands,\r\n            returnNotifications: this.returnNotifications\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = PluginRegisterQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * PluginUpdateQuery class\r\n */\r\nclass PluginUpdateQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates Plugin Update Query model\r\n     * @param {object} options - Options for instance\r\n     * @param {string} options.topicName - Name of topic that was created for the plugin\r\n     * @param {string} [options.deviceId] - Device device_id\r\n     * @param {string} [options.networkIds] - Network ids\r\n     * @param {string} [options.deviceTypeIds] - Device type ids\r\n     * @param {string} [options.names] - Command/Notification names\r\n     * @param {boolean} [options.returnCommands] - Checks if commands should be returned\r\n     * @param {boolean} [options.returnUpdatedCommands] - Checks if updated commands should be returned\r\n     * @param {boolean} [options.returnNotifications] - Checks if commands should be returned\r\n     * @param {string} [options.status] - Plugin status - active or disabled (ACTIVE | DISABLED | CREATED)\r\n     * @param {string} [options.name] - Plugin name\r\n     * @param {string} [options.description] - Plugin description\r\n     * @param {string} [options.parameters] - Plugin parameters\r\n     */\r\n    constructor({ topicName, deviceId, networkIds, deviceTypeIds, names, returnCommands, returnUpdatedCommands,\r\n                    returnNotifications, status, name, description, parameters } = {}) {\r\n        super();\r\n\r\n        this.topicName = topicName;\r\n        this.deviceId = deviceId;\r\n        this.networkIds = networkIds;\r\n        this.deviceTypeIds = deviceTypeIds;\r\n        this.names = names;\r\n        this.returnCommands = returnCommands;\r\n        this.returnUpdatedCommands = returnUpdatedCommands;\r\n        this.returnNotifications = returnNotifications;\r\n        this.status = status;\r\n        this.name = name;\r\n        this.description = description;\r\n        this.parameters = parameters;\r\n    }\r\n\r\n    get topicName() {\r\n        return this._topicName;\r\n    }\r\n\r\n    set topicName(value) {\r\n        this._topicName = value;\r\n    }\r\n\r\n    get deviceId() {\r\n        return this._deviceId;\r\n    }\r\n\r\n    set deviceId(value) {\r\n        this._deviceId = value;\r\n    }\r\n\r\n    get networkIds() {\r\n        return this._networkIds;\r\n    }\r\n\r\n    set networkIds(value) {\r\n        this._networkIds = value;\r\n    }\r\n\r\n    get deviceTypeIds() {\r\n        return this._deviceTypeIds;\r\n    }\r\n\r\n    set deviceTypeIds(value) {\r\n        this._deviceTypeIds = value;\r\n    }\r\n\r\n    get names() {\r\n        return this._names;\r\n    }\r\n\r\n    set names(value) {\r\n        this._names = value;\r\n    }\r\n\r\n    get returnCommands() {\r\n        return this._returnCommands;\r\n    }\r\n\r\n    set returnCommands(value) {\r\n        this._returnCommands = value;\r\n    }\r\n\r\n    get returnUpdatedCommands() {\r\n        return this._returnUpdatedCommands;\r\n    }\r\n\r\n    set returnUpdatedCommands(value) {\r\n        this._returnUpdatedCommands = value;\r\n    }\r\n\r\n    get returnNotifications() {\r\n        return this._returnNotifications;\r\n    }\r\n\r\n    set returnNotifications(value) {\r\n        this._returnNotifications = value;\r\n    }\r\n\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    set status(value) {\r\n        this._status = value;\r\n    }\r\n\r\n    get name() {\r\n        return this._name;\r\n    }\r\n\r\n    set name(value) {\r\n        this._name = value;\r\n    }\r\n\r\n    get description() {\r\n        return this._description;\r\n    }\r\n\r\n    set description(value) {\r\n        this._description = value;\r\n    }\r\n\r\n    get parameters() {\r\n        return this._parameters;\r\n    }\r\n\r\n    set parameters(value) {\r\n        this._parameters = value;\r\n    }\r\n\r\n    /**\r\n     *\r\n     * @returns {{topicName: string, deviceId: string, networkIds: string, deviceTypeIds: string, names: string, returnCommands: boolean, returnUpdatedCommands: boolean, returnNotifications: boolean, status: string,name: string, description: string, parameters: string }}\r\n     */\r\n    toObject() {\r\n        return {\r\n            topicName: this.topicName,\r\n            deviceId: this.deviceId,\r\n            networkIds: this.networkIds,\r\n            deviceTypeIds: this.deviceTypeIds,\r\n            names: this.names,\r\n            returnCommands: this.returnCommands,\r\n            returnUpdatedCommands: this.returnUpdatedCommands,\r\n            returnNotifications: this.returnNotifications,\r\n            status: this.status,\r\n            name: this.name,\r\n            description: this.description,\r\n            parameters: this.parameters\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = PluginUpdateQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * UserCountQuery class\r\n */\r\nclass UserCountQuery extends BaseModel {\r\n    \r\n    /**\r\n     * Creates User Count Query\r\n     * @param {object} options - Options for instance\r\n     * @param {string} options.login - Filter by user login\r\n     * @param {string} options.loginPattern - Filter by user login pattern\r\n     * @param {number} options.role - Filter by user login patter\r\n     * @param {number} options.status - Filter by user status. 0 is Active, 1 is Locked Out, 2 is Disabled\r\n     * \r\n     */\r\n    constructor({ login, loginPattern, role, status } = {}) {\r\n        super();\r\n\r\n        this.login = login;\r\n        this.loginPattern = loginPattern;\r\n        this.role = role;\r\n        this.status = status;\r\n    }\r\n\r\n    get login() {\r\n        return this._login;\r\n    }\r\n\r\n    set login(value) {\r\n        this._login = value;\r\n    }\r\n\r\n    get loginPattern() {\r\n        return this._loginPattern;\r\n    }\r\n\r\n    set loginPattern(value) {\r\n        this._loginPattern = value;\r\n    }\r\n\r\n    get role() {\r\n        return this._role;\r\n    }\r\n\r\n    set role(value) {\r\n        this._role = value;\r\n    }\r\n\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    set status(value) {\r\n        this._status = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            login: this.login,\r\n            loginPattern: this.loginPattern,\r\n            role: this.role,\r\n            status: this.status\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = UserCountQuery;",
    "const BaseModel = require(`../BaseModel`);\r\n\r\n\r\n/**\r\n * UserListQuery class\r\n */\r\nclass UserListQuery extends BaseModel {\r\n\r\n    /**\r\n     * Creates User List Query\r\n     * @param {object} options - Options for instance\r\n     * @param {string} options.login - Filter by user login\r\n     * @param {string} options.loginPattern - Filter by user login pattern\r\n     * @param {number} options.role - Filter by user login patter\r\n     * @param {number} options.status - Filter by user status. 0 is Active, 1 is Locked Out, 2 is Disabled\r\n     * @param {string} options.sortField - Result list sort field\r\n     * @param {string} options.sortOrder - Result list sort order. The sortField should be specified\r\n     * @param {number} options.take - Number of records to take from the result list\r\n     * @param {number} options.skip - Number of records to skip from the result list\r\n     */\r\n    constructor({ login, loginPattern, role, status, sortField, sortOrder, take, skip } = {}) {\r\n        super();\r\n\r\n        this.login = login;\r\n        this.loginPattern = loginPattern;\r\n        this.role = role;\r\n        this.status = status;\r\n        this.sortField = sortField;\r\n        this.sortOrder = sortOrder;\r\n        this.take = take;\r\n        this.skip = skip;\r\n    }\r\n\r\n    get login() {\r\n        return this._login;\r\n    }\r\n\r\n    set login(value) {\r\n        this._login = value;\r\n    }\r\n\r\n    get loginPattern() {\r\n        return this._loginPattern;\r\n    }\r\n\r\n    set loginPattern(value) {\r\n        this._loginPattern = value;\r\n    }\r\n\r\n    get role() {\r\n        return this._role;\r\n    }\r\n\r\n    set role(value) {\r\n        this._role = value;\r\n    }\r\n\r\n    get status() {\r\n        return this._status;\r\n    }\r\n\r\n    set status(value) {\r\n        this._status = value;\r\n    }\r\n\r\n    get sortField() {\r\n        return this._sortField;\r\n    }\r\n\r\n    set sortField(value) {\r\n        this._sortField = value;\r\n    }\r\n\r\n    get sortOrder() {\r\n        return this._sortOrder;\r\n    }\r\n\r\n    set sortOrder(value) {\r\n        this._sortOrder = value;\r\n    }\r\n\r\n    get take() {\r\n        return this._take;\r\n    }\r\n\r\n    set take(value) {\r\n        this._take = value;\r\n    }\r\n\r\n    get skip() {\r\n        return this._skip;\r\n    }\r\n\r\n    set skip(value) {\r\n        this._skip = value;\r\n    }\r\n\r\n    /**\r\n     * Returns instance as a plain JS object\r\n     * @returns {Object}\r\n     */\r\n    toObject() {\r\n        return {\r\n            login: this.login,\r\n            loginPattern: this.loginPattern,\r\n            role: this.role,\r\n            status: this.status,\r\n            sortField: this.sortField,\r\n            sortOrder: this.sortOrder,\r\n            take: this.take,\r\n            skip: this.skip\r\n        }\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = UserListQuery;",
    "require('isomorphic-fetch');\r\nconst Transport = require(`./base/Transport`);\r\nconst Utils = require('../utils/Utils');\r\nconst ReconnectionAttemptFailedError = require('../error/ReconnectionAttemptFailedError');\r\nconst { URL } = require(`url`);\r\n\r\n/**\r\n * HTTP Transport class\r\n * @event open\r\n * @event message\r\n * @event error\r\n * @event reconnected\r\n */\r\nclass HTTP extends Transport {\r\n\r\n    static get TYPE() { return `http`; }\r\n    static get GET_METHOD() { return `GET`; }\r\n\r\n    /**\r\n     * Creates HTTP\r\n     */\r\n    constructor() {\r\n        super();\r\n\r\n        const me = this;\r\n\r\n        me.type = HTTP.TYPE;\r\n        me.token= ``;\r\n        me.subscriptionMap = new Map();\r\n        me.reconnectionIntervalHandler = null;\r\n        me.pingUrl = ``;\r\n        me.pingMethod = ``;\r\n    }\r\n\r\n    /**\r\n     * Connect HTTP transport\r\n     */\r\n    connect() {\r\n        const me = this;\r\n\r\n        return new Promise((resolve) => {\r\n            me._ping()\r\n                .then(resolve)\r\n                .catch(() => me._startReconnection());\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Authenticate transport\r\n     * @param {string} token - Auth token\r\n     */\r\n    authenticate(token) {\r\n        const me = this;\r\n\r\n        me.token = token;\r\n\r\n        return Promise.resolve();\r\n    }\r\n\r\n    /**\r\n     * HTTP transport send method\r\n     * @param endpoint\r\n     * @param method\r\n     * @param body\r\n     * @param subscription\r\n     * @param unsubscription\r\n     * @param noAuth\r\n     * @param polling\r\n     * @returns {*}\r\n     */\r\n    send({ endpoint, method, body, subscription, unsubscription, noAuth, polling=false }) {\r\n        const me = this;\r\n\r\n        if (subscription === true) {\r\n            const subscriptionId = Utils.randomString();\r\n            const longPollingHandler = me._initLongPolling(subscriptionId, endpoint, method, body);\r\n\r\n            longPollingHandler.poll();\r\n\r\n            me.subscriptionMap.set(subscriptionId, longPollingHandler);\r\n\r\n            return Promise.resolve({ subscriptionId: subscriptionId })\r\n        } else if (unsubscription === true) {\r\n            const subscriptionId = body.subscriptionId;\r\n            const longPollingHandler = me.subscriptionMap.get(subscriptionId);\r\n\r\n            if (longPollingHandler) {\r\n                longPollingHandler.stop();\r\n                me.subscriptionMap.delete(subscriptionId);\r\n\r\n                return Promise.resolve({ status: `success` });\r\n            } else {\r\n                return Promise.resolve({ status: `No such subscription` });\r\n            }\r\n        } else {\r\n            return fetch(endpoint, { headers: me._getHeaders(noAuth), method: method, body: JSON.stringify(body) })\r\n                .then(response => response.text())\r\n                .then(responseText => responseText ? JSON.parse(responseText) : responseText)\r\n                .catch(error => {\r\n                    if (!polling) { throw error; }\r\n                    else { return me._ping().catch(() => me._startReconnection()); }\r\n                })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Disconnects HTTP transport\r\n     */\r\n    disconnect() {\r\n        const me = this;\r\n\r\n        me._stopAllPolling();\r\n\r\n        me.token= ``;\r\n    }\r\n\r\n    /**\r\n     * Initialize http sever ping parameters\r\n     * @param pingUrl\r\n     * @param pingMethod\r\n     */\r\n    initPingParameters(pingUrl, pingMethod) {\r\n        const me = this;\r\n\r\n        me.pingUrl = pingUrl;\r\n        me.pingMethod = pingMethod;\r\n    }\r\n\r\n    /**\r\n     * Ping server\r\n     * @returns {Promise<Response>}\r\n     * @private\r\n     */\r\n    _ping() {\r\n        const me = this;\r\n\r\n        return fetch(me.pingUrl, { headers: me._getHeaders(true), method: me.pingMethod });\r\n    }\r\n\r\n    /**\r\n     * Initialize polling functionality\r\n     * @param subscriptionId\r\n     * @param endpoint\r\n     * @param method\r\n     * @param body\r\n     * @returns {{poll: poll, stop: stop}}\r\n     */\r\n    _initLongPolling(subscriptionId, endpoint, method, body) {\r\n        const me = this;\r\n        let stopped = false;\r\n        const parsedEndpoint = new URL(endpoint);\r\n\r\n        /**\r\n         * Poll notifications\r\n         */\r\n        function poll () {\r\n            me.send({ endpoint: parsedEndpoint.href, method, body, polling: true })\r\n                .then((messageList) => {\r\n                    if (!stopped) {\r\n                        if (messageList && messageList.length) {\r\n                            let latestTimestamp;\r\n\r\n                            messageList.forEach((message) => {\r\n                                message.subscriptionId = subscriptionId;\r\n                                me.emit(Transport.MESSAGE_EVENT, message);\r\n\r\n                                latestTimestamp = Utils.getLatestTimestamp(message.timestamp, latestTimestamp);\r\n                            });\r\n\r\n                            if (latestTimestamp) {\r\n                                parsedEndpoint.searchParams.set(`timestamp`, latestTimestamp);\r\n                            }\r\n                        }\r\n\r\n                        poll();\r\n                    }\r\n                })\r\n                .catch((error) => me.emit(Transport.ERROR_EVENT, error));\r\n        }\r\n\r\n        /**\r\n         * Stop polling\r\n         */\r\n        function stop () {\r\n            stopped = true;\r\n        }\r\n\r\n        return { poll, stop };\r\n    }\r\n\r\n    /**\r\n     * Reconnection routine\r\n     * @private\r\n     */\r\n    _startReconnection() {\r\n        const me = this;\r\n        let successfulPinged = false;\r\n        let reconnectionCounter = 0;\r\n\r\n        me._stopAllPolling();\r\n\r\n        me.reconnectionIntervalHandler = setInterval(() => {\r\n            me._ping()\r\n                .then(() => {\r\n                    if (!successfulPinged) {\r\n                        successfulPinged = true;\r\n                        clearInterval(me.reconnectionIntervalHandler);\r\n\r\n                        me.emit(Transport.RECONNECTED_EVENT);\r\n                    }\r\n                })\r\n                .catch(() => {\r\n                    if (!successfulPinged) {\r\n                        reconnectionCounter++;\r\n\r\n                        if (reconnectionCounter === me.reconnectionAttempts) {\r\n                            clearInterval(me.reconnectionIntervalHandler);\r\n                        }\r\n\r\n                        me.emit(Transport.ERROR_EVENT, new ReconnectionAttemptFailedError(reconnectionCounter));\r\n                    }\r\n                });\r\n        }, me.reconnectionInterval);\r\n    }\r\n\r\n    /**\r\n     * Stop all polling handlers\r\n     * @private\r\n     */\r\n    _stopAllPolling() {\r\n        const me = this;\r\n\r\n        me.subscriptionMap.forEach((pollingHandler) => pollingHandler.stop());\r\n        me.subscriptionMap.clear();\r\n    }\r\n\r\n    /**\r\n     * Returns request headers\r\n     * @param noAuth\r\n     * @returns {Object}\r\n     * @private\r\n     */\r\n    _getHeaders(noAuth = false) {\r\n        const me = this;\r\n        const headers = {\r\n            \"Content-type\": `application/json`,\r\n            \"Accept\": `application/json`\r\n        };\r\n\r\n        if (me.token && !noAuth) {\r\n            headers.Authorization = `Bearer ${me.token}`;\r\n        }\r\n\r\n        return headers;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = HTTP;",
    "const Transport = require(`./base/Transport`);\r\nconst Utils = require('../utils/Utils');\r\nconst WebSocket = require('universal-websocket-client');\r\nconst WebSocketError = require('../error/WebSocketError');\r\nconst ReconnectionAttemptFailedError = require('../error/ReconnectionAttemptFailedError');\r\n\r\n\r\n/**\r\n * WebSocket Transport class\r\n * @event open\r\n * @event message\r\n * @event error\r\n * @event reconnected\r\n */\r\nclass WS extends Transport {\r\n\r\n    static get TYPE() { return `ws`; }\r\n\r\n    static get OPEN_EVENT() { return `open`; }\r\n    static get MESSAGE_EVENT() { return `message`; }\r\n    static get ERROR_EVENT() { return `error`; }\r\n    static get CLOSE_EVENT() { return `close`; }\r\n\r\n    static get ERROR_CONNECTION_RESET_CODE() { return `ECONNRESET`; }\r\n    static get ERROR_CONNECTION_REFUSED_CODE() { return `ECONNREFUSED`; }\r\n\r\n\r\n    /**\r\n     * Creates WS\r\n     * @param {String} url - WebSocket URL\r\n     */\r\n    constructor({ url } = {}) {\r\n        super();\r\n\r\n        const me = this;\r\n\r\n        me.type = WS.TYPE;\r\n        me.url = url;\r\n        me.isOpend = false;\r\n        me.isReconnecting = false;\r\n        me.reconnectionCounter = 0;\r\n    }\r\n\r\n    /**\r\n     * Connect WebSocket transport\r\n     * @returns {Promise<any>}\r\n     */\r\n    connect() {\r\n        const me = this;\r\n\r\n        return new Promise((resolve) => {\r\n            me.once(Transport.OPEN_EVENT, resolve);\r\n            me._open();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Authenticate transport\r\n     * @param {String} token - Auth token\r\n     * @returns {*}\r\n     */\r\n    authenticate(token) {\r\n        const me = this;\r\n\r\n        return me.send({ action: `authenticate`, token: token });\r\n    }\r\n\r\n    /**\r\n     * WebSocket API send method\r\n     */\r\n    send(params) {\r\n        const me = this;\r\n\r\n        return me._getSocket()\r\n            .then(() => {\r\n                const { requestId = Utils.randomString() } = params;\r\n\r\n                params.requestId = requestId;\r\n\r\n                return new Promise((resolve) => {\r\n                    me.socket.send(JSON.stringify(params));\r\n\r\n                    const listener = messageData => {\r\n                        if (messageData.requestId === requestId) {\r\n                            me.removeListener(params.requestId, listener);\r\n\r\n                            resolve(messageData);\r\n                        }\r\n                    };\r\n\r\n                    me.addListener(params.requestId, listener);\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * Disconnects WS transport\r\n     */\r\n    disconnect() {\r\n        const me = this;\r\n\r\n        me.socket.close();\r\n    }\r\n\r\n    /**\r\n     * Opens WS connection\r\n     * @private\r\n     */\r\n    _open() {\r\n        const me = this;\r\n\r\n        me.socket = new WebSocket(me.url);\r\n\r\n        me.socket.addEventListener(WS.MESSAGE_EVENT, event => {\r\n            try {\r\n                const messageData = JSON.parse(event.data);\r\n\r\n                if (messageData.requestId) {\r\n                    me.emit(messageData.requestId, messageData);\r\n                } else {\r\n                    me.emit(Transport.MESSAGE_EVENT, messageData);\r\n                }\r\n            } catch (error) {\r\n                console.warn(error);\r\n            }\r\n        });\r\n\r\n        me.socket.addEventListener(WS.ERROR_EVENT, (error) => {\r\n            me.isReconnecting = false;\r\n\r\n            switch (error.code){\r\n                case WS.ERROR_CONNECTION_RESET_CODE:\r\n                case WS.ERROR_CONNECTION_REFUSED_CODE:\r\n                    me._reconnect();\r\n                    break;\r\n                default:\r\n                    me.emit(Transport.ERROR_EVENT, new WebSocketError(error));\r\n                    break;\r\n            }\r\n        });\r\n\r\n        me.socket.addEventListener(WS.OPEN_EVENT, () => {\r\n            me.isOpend = true;\r\n            me.reconnectionCounter = 0;\r\n\r\n            if (me.isReconnecting === true) {\r\n                me.isReconnecting = false;\r\n\r\n                me.emit(Transport.RECONNECTED_EVENT);\r\n            } else {\r\n                me.emit(Transport.OPEN_EVENT);\r\n            }\r\n        });\r\n\r\n        me.socket.addEventListener(WS.CLOSE_EVENT, () => me.isOpend = false);\r\n    }\r\n\r\n    /**\r\n     * Gettting socket according to if it opened\r\n     * @returns {Promise} when socket opened\r\n     */\r\n    _getSocket() {\r\n        const me = this;\r\n\r\n        return new Promise((resolve, reject) => {\r\n            if (me.isOpend === true) {\r\n                resolve(me.socket);\r\n            } else if (me.isReconnecting === true) {\r\n                reject(new Error(`WebSocket is reconnecting`));\r\n            } else {\r\n                me.socket.addEventListener(WS.OPEN_EVENT, () => {\r\n                    me.isOpend = true;\r\n                    resolve(me.socket);\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Reconnection routine\r\n     * @private\r\n     */\r\n    _reconnect() {\r\n        const me = this;\r\n\r\n        if (me.reconnectionCounter) {\r\n            me.emit(Transport.ERROR_EVENT, new ReconnectionAttemptFailedError(me.reconnectionCounter));\r\n        }\r\n\r\n        me.isOpend = false;\r\n        me.isReconnecting = true;\r\n        me.socket.removeAllListeners();\r\n\r\n        if (me.reconnectionCounter !== me.reconnectionAttempts) {\r\n            setTimeout(() => me._open(), me.reconnectionInterval);\r\n        }\r\n\r\n        me.reconnectionCounter++;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = WS;",
    "const EventEmitter = require('events');\r\nconst Utils = require(`../../utils/Utils`);\r\n\r\n\r\n/**\r\n * Base Transport class\r\n * @event open\r\n * @event message\r\n * @event error\r\n * @event reconnected\r\n */\r\nclass Transport extends EventEmitter {\r\n\r\n    static get OPEN_EVENT() { return `open`; }\r\n    static get MESSAGE_EVENT() { return `message`; }\r\n    static get ERROR_EVENT() { return `error`; }\r\n    static get RECONNECTED_EVENT() { return `reconnected`; }\r\n\r\n    static get INFINITY_RECONNECTION() { return -1; }\r\n    static get RECONNECTION_TIMEOUT_MS() { return 5000; }\r\n\r\n    get reconnectionAttempts() {\r\n        return this._reconnectionAttempts;\r\n    }\r\n\r\n    set reconnectionAttempts(value) {\r\n        this._reconnectionAttempts = Utils.isDefined(value) ? value : Transport.INFINITY_RECONNECTION;\r\n    }\r\n\r\n    get reconnectionInterval() {\r\n        return this._reconnectionInterval;\r\n    }\r\n\r\n    set reconnectionInterval(value) {\r\n        this._reconnectionInterval = Utils.isDefined(value) ? value : Transport.RECONNECTION_TIMEOUT_MS;\r\n    }\r\n\r\n    /**\r\n     * Connect transport\r\n     */\r\n    connect() {\r\n        console.warn(`Method \"connect\" should be implemented in nested classes`);\r\n    }\r\n\r\n    /**\r\n     * Authenticate transport with token\r\n     * @param token\r\n     */\r\n    authenticate(token) {\r\n        console.warn(`Method \"authenticate\" should be implemented in nested classes`);\r\n    }\r\n\r\n    /**\r\n     * Send message via transport\r\n     */\r\n    send() {\r\n        console.warn(`Method \"send\" should be implemented in nested classes`);\r\n    }\r\n\r\n    /**\r\n     * Disconnects transport\r\n     */\r\n    disconnect() {\r\n        console.warn(`Method \"disconnect\" should be implemented in nested classes`);\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Transport;",
    "const jwtDecode = require(`jwt-decode`);\r\nconst UserToken = require(`../models/UserToken`);\r\n\r\n\r\n/**\r\n * Utils\r\n */\r\nclass Utils {\r\n\r\n    static get TOKEN_EXPIRED_MARK() { return `Token expired`; }\r\n\r\n    /**\r\n     * Checks that object is empty\r\n     * @returns {boolean} - Is object empty\r\n     */\r\n    static isObjectEmpty(obj) {\r\n        return obj && obj.constructor === Object && Object.keys(obj).length === 0;\r\n    }\r\n\r\n    /**\r\n     * Returns a twenty-character random string\r\n     * @return {string} - Twenty-character random string\r\n     */\r\n    static randomString() {\r\n        const firstPart = Math.random()\r\n            .toString(36)\r\n            .substring(2, 15);\r\n        const secondPart = Math.random()\r\n            .toString(36)\r\n            .substring(2, 15);\r\n\r\n        return `${firstPart}${secondPart}`;\r\n    }\r\n\r\n    /**\r\n     * Creates UserToken from jwt\r\n     * @param jwtToken\r\n     * @returns {UserToken}\r\n     */\r\n    static createUserTokenFromJWT(jwtToken) {\r\n        const tokenPayload = jwtDecode(jwtToken).payload;\r\n\r\n        return new UserToken({\r\n            userId: tokenPayload.u,\r\n            actions: tokenPayload.a,\r\n            networkIds: tokenPayload.n,\r\n            deviceTypeIds: tokenPayload.dt\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Checks for value is not undefined and not null\r\n     * @param value\r\n     * @returns {boolean}\r\n     */\r\n    static isDefined(value) {\r\n        return !(typeof value === 'undefined' || value === null);\r\n    }\r\n\r\n    /**\r\n     * Empty function\r\n     */\r\n    static emptyFn() {}\r\n\r\n    /**\r\n     * Returns latest timestamp\r\n     * @param ts1\r\n     * @param ts2\r\n     * @returns {*}\r\n     */\r\n    static getLatestTimestamp(ts1, ts2) {\r\n        if (!ts1) { return ts2; }\r\n        else if (!ts2) { return ts1; }\r\n\r\n        return new Date(ts1).getTime() > new Date(ts2).getTime() ? ts1 : ts2;\r\n    }\r\n}\r\n\r\n\r\nmodule.exports = Utils;"
  ]
}